[{"title":"create-react-app使用笔记","url":"http://www.maotingfeng.me/2017/11/10/create-react-app使用笔记/","content":"<h2 id=\"create-react-app使用笔记\"><a href=\"#create-react-app使用笔记\" class=\"headerlink\" title=\"create-react-app使用笔记\"></a>create-react-app使用笔记</h2><p>官方脚手架功能强大，各个需求点也是考虑到了，是开发react应用的神器。</p>\n<p>###如何使用</p>\n<p>​    <code>create-react-app</code>依赖两个包,一个是<code>create-react-app</code>全局命令工具包，用来创建新的项目，就是<code>create-react-app myProject</code>命令；第二个是<code>react-scripts</code>在生成的项目中依赖的包。一般不用升级create-react-app，因为主要的react依赖都是由react-scripts来生成的，而生成的<code>react-scripts</code>会自动下载最新 版，所以你用的react包也是最新版本的。</p>\n<p>###create-react-app生成的项目结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── README.md</div><div class=\"line\">├── node_modules</div><div class=\"line\">├── package.json</div><div class=\"line\">├── public</div><div class=\"line\">│   ├── favicon.ico</div><div class=\"line\">│   ├── index.html</div><div class=\"line\">│   └── manifest.json</div><div class=\"line\">├── src</div><div class=\"line\">│   ├── App.css</div><div class=\"line\">│   ├── App.js</div><div class=\"line\">│   ├── App.test.js</div><div class=\"line\">│   ├── index.css</div><div class=\"line\">│   ├── index.js</div><div class=\"line\">│   ├── logo.svg</div><div class=\"line\">│   └── registerServiceWorker.js</div><div class=\"line\">└── yarn.lock</div></pre></td></tr></table></figure>\n<p>项目中必须存在的文件：</p>\n<ul>\n<li>public/index.html   html模版文件</li>\n<li>src/index.js   react应用的入口文件</li>\n</ul>\n<p>可以在<code>src</code>目录下新建N多个子集目录，只有在src下的资源，才能被webpack处理，所以一般都将js和css资源放入<code>src</code>目录下，图片资源也可以放<code>src</code>里面,</p>\n<p>官方demo则将svg资源放入了<code>src</code>中。</p>\n<h3 id=\"可运行的脚本\"><a href=\"#可运行的脚本\" class=\"headerlink\" title=\"可运行的脚本\"></a>可运行的脚本</h3><ul>\n<li><code>npm start</code>运行开发运行，默认会打开<code>http://localhost:3000</code>的浏览界，可以热更新代码</li>\n<li><code>npm test</code>运行测试脚本</li>\n<li><code>npm run build</code>打包命令，会启用react的生产环境模式，去除类型检查等，压缩代码</li>\n<li><code>npm run eject</code>暴露出默认配置文件</li>\n</ul>\n<p>###支持最新的JavaScript新功能和Polyfills</p>\n<p>该项目支持最新的JavaScript标准的超集。除了es6的语法，<code>create-react-app</code>还支持：</p>\n<ul>\n<li>指数运算符</li>\n<li>Async/await语法(ES2017)</li>\n<li>对象的解构赋值</li>\n<li>动态import 语法</li>\n<li>类静态属性</li>\n<li>JSX语法和flow语法</li>\n</ul>\n<p>另外官方仅仅包含了很少一个部分的ES6 polyfills:</p>\n<ul>\n<li>Object.assign() 支持 <a href=\"https://github.com/sindresorhus/object-assign\" target=\"_blank\" rel=\"external\">object-assign</a></li>\n<li>Promise 支持，<a href=\"https://github.com/then/promise\" target=\"_blank\" rel=\"external\">promise</a></li>\n<li>fetch支持，<a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"external\">whatwg-fetch</a></li>\n</ul>\n<p>所以当用到一些需要polyfills的功能时，某些polyfills需要手动添加</p>\n<p>###改变html的title</p>\n<p>找到<code>public/index.html</code>直接修改title即可，如果是单页应用，则在每个component的componentDidMount的生命周期方法中，调用document.title来修改。你也可以参考<a href=\"https://github.com/nfl/react-helmet\" target=\"_blank\" rel=\"external\">React Helmet</a></p>\n<p>###导入组件</p>\n<p>支持commonjs模块语法，当然最好使用import 和 export 语法</p>\n<p>###代码分割</p>\n<p>当某些代码片段需要异步加载的时候特别有用，用法如下：</p>\n<p><code>chart.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const initChart = () =&gt; &#123; // do something... &#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; initChart &#125;;</div></pre></td></tr></table></figure>\n<p><code>App.js</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  click = () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">'./chart.js'</span>)</div><div class=\"line\">      .then((&#123; initChart &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"comment\">// 使用 initChart() ;</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .catch(err =&gt; &#123;</div><div class=\"line\">        <span class=\"comment\">// 错误处理</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;button onClick=&#123;this.click&#125;&gt;加载图表&lt;/button&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</div></pre></td></tr></table></figure>\n<p>也可以使用<code>async/await</code>语法来使用这个特性：</p>\n<p><code>App.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  click = <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> &#123; initChart &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>( <span class=\"string\">'./chart'</span> ).catch( e=&gt;<span class=\"built_in\">console</span>.warn(e) ) ;</div><div class=\"line\">    initChart() ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;button onClick=&#123;this.click&#125;&gt;加载图表&lt;/button&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</div></pre></td></tr></table></figure>\n<p>比用上面的语法简单清晰很多。</p>\n<p>###添加样式表</p>\n<p><code>create-react-app</code>已经内置了配置好了的webpack,可以将css当作js资源一样引入到js文件中。</p>\n<p><code>Button.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.Button</span> &#123; <span class=\"attribute\">color</span>: red ; &#125;</div></pre></td></tr></table></figure>\n<p><code>Button.js</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Button.css'</span>; <span class=\"comment\">// 引入css资源</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div className=\"Button\" /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在开发环境中，修改css文件，可以热更新；生产环境中，则所有css文件会被打包进一个.css文件中，通过link标签注入到<code>public/index.html</code>中。这种方式，增加了迁移到其他打包工具的成本，不过对于打包工具仅仅是webpack来说很方便。</p>\n<p>另外<code>create-react-app</code>集成了插件<code>Autoprefixer</code>，可以自动帮你补全浏览器前缀。</p>\n<p>###添加图像、字体、文件</p>\n<p>引入一个文件，是告诉webpack把，这个文件引入到打包的bundle中，不像import css文件，引入一个文件，webpack会自动转化为一个字符串，如，src的url地址，href的超链接地址。</p>\n<p>比如图片的话，如果大小小雨10,000字节，则会返回一个data URI的字符串，如果大于的话，则返回相对于<code>%PUBLIC_URL%</code>的url地址。目前<code>create-react-app</code>支持bmp,gif,jpg,jpeg,png。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.png'</span>; <span class=\"comment\">// 引入logo png资源</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(logo); <span class=\"comment\">// 字符串\"/logo.84287d09.png\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Header</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 设置src等于logo</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;img src=&#123;logo&#125; alt=\"Logo\" /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\">export default Header;</div></pre></td></tr></table></figure>\n<p>webpack会根据资源的内容动态生成hash,如果以后图片有小修改，就不用加版本号了，清除缓存很方便。</p>\n<p>###正确使用<code>public</code>文件夹</p>\n<p><code>public/index.html</code>里面的内容可以随意修改，添加或者删除script标签等。</p>\n<p><code>create-react-app</code>鼓励使用import 语法来引入 样式、图片、字体文件，因为有如下好处：</p>\n<ul>\n<li>一起打包可以减少网络请求</li>\n<li>编译过程中的错误，可以预防上线出现的404错误</li>\n<li>根据内容自动生成hash，可以预防浏览器缓存</li>\n</ul>\n<p>如果将静态资源放入<code>public</code>文件夹中，它不会被webpack处理，仅仅打包之后，会被拷贝到<code>build</code>目录中。为了引用到这个资源，你需要使用一个叫<code>PUBLIC_URL</code>的变量。在<code>index.html</code>中，有如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"%PUBLIC_URL%/favicon.ico\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>只有在<code>public</code>中的文件，才可以用<code>%PUBLIC_URL%</code>获取。如果资源在src或者node_modules里面，你需要拷贝到<code>public</code>目录中去使用。</p>\n<p>当我们使用<code>yarn build</code>的时候，<code>%PUBLIC_URL%</code>会被绝对路径替换，就是网站的静态资源根目录。</p>\n<p>在JavaScript代码中，也可以通过<code>process.env.PUBLIC_URL</code>来访问，不过官方不推荐使用。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;process.env.PUBLIC_URL</span> + '/<span class=\"attr\">img</span>/<span class=\"attr\">logo.png</span>'&#125; /&gt;</span>;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要注意的是：</p>\n<ul>\n<li><code>public</code>里的文件不会被预处理，和压缩</li>\n<li>丢失文件，会导致404</li>\n<li>当文件改变时，需要手动重命名，或者手动添加版本号，来处理缓存问题。</li>\n</ul>\n<p>什么时候使用<code>public</code>文件夹</p>\n<ul>\n<li>需要在构建输出中具有特定名称的文件，比如manifest.webmanifest</li>\n<li>有N多图片，动态引入的图片</li>\n<li>某个js文件不想引入到bundle中</li>\n<li>一些第三方库和webpack不兼容</li>\n</ul>\n<p>###如何使用全局变量</p>\n<p>当在js代码中引入第三方的全局变量时，linter会提示，没有定义过的变量，怎么解决？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> $ = <span class=\"built_in\">window</span>.$</div></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.extend( &#123;&#125; , &#123;a:<span class=\"number\">1</span>&#125; ) ; <span class=\"comment\">// eslint-disable-line</span></div></pre></td></tr></table></figure>\n<p>不检测当行代码</p>\n<h3 id=\"自动格式化代码\"><a href=\"#自动格式化代码\" class=\"headerlink\" title=\"自动格式化代码\"></a>自动格式化代码</h3><p><a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"external\">prettier</a>是一个独立的（opinionated）代码格式化工具。用它，可以确保在一个工程里有统一的代码风格。使用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save husky lint-staged prettier</div></pre></td></tr></table></figure>\n<p>或者(  通过yarn安装有坑，下面会讲解 )</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn add husky lint-staged prettier</div></pre></td></tr></table></figure>\n<ul>\n<li><code>husky</code>监听hithooks的事件，然后执行自定义的命令</li>\n<li><code>lint-staged</code>允许我们在git中已经暂存的文件里，执行脚本命令</li>\n<li><code>prettier</code>在commit之前，格式化我们的代码</li>\n</ul>\n<p>修改<code>package.json</code>文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">+   \"precommit\": \"lint-staged\",</div><div class=\"line\">    \"start\": \"react-scripts start\",</div><div class=\"line\">    \"build\": \"react-scripts build\",</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">  \"dependencies\": &#123;</div><div class=\"line\">    // ...</div><div class=\"line\">  &#125;,</div><div class=\"line\">+ \"lint-staged\": &#123;</div><div class=\"line\">+   \"src/**/*.&#123;js,jsx,json,css&#125;\": [</div><div class=\"line\">+     \"prettier --single-quote --write\",</div><div class=\"line\">+     \"git add\"</div><div class=\"line\">+   ]</div><div class=\"line\">+ &#125;,</div><div class=\"line\">  \"scripts\": &#123;</div></pre></td></tr></table></figure>\n<p>现在，当我们<code>git commit -m &quot;...&quot;</code>执行的时候，<code>Prettier</code>会自动格式化已经修改过的文件，然后提交。</p>\n<p>当然，我们也可以通过<code>./node_modules/.bin/prettier --single-quote --write &quot;src/**/*.{js,jsx}&quot;</code>来格式化整个工程。</p>\n<p>通过<code>yarn</code>安装之后，可能会遇到<code>git commit</code>之后没有任何反应的坑，google之后，发现<a href=\"https://github.com/typicode/husky/issues/81\" target=\"_blank\" rel=\"external\">how to setting up?</a></p>\n<p>情况一样，原来通过<code>yarn</code>安装的<code>husky</code>，默认不会执行husky的安装程序。所以解决方案就是手动执行一下安装程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node node_modules/husky/bin/install.js</div></pre></td></tr></table></figure>\n<p>看到done,就说明设置git的钩子成功了</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/WechatIMG39.jpeg\" alt=\"手动执行husky的安装程序\"></p>\n<h3 id=\"在Visual-Studio-Code中Debugger\"><a href=\"#在Visual-Studio-Code中Debugger\" class=\"headerlink\" title=\"在Visual Studio Code中Debugger\"></a>在Visual Studio Code中Debugger</h3><p>首先需要安装最新的<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VS Code</a>和 VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"external\">Chrome Debugger Extension</a> 。</p>\n<p>之后在项目根目录下新建<code>.vscode</code>文件夹，在里面新建<code>launch.json</code>，将如下代码放入其中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"configurations\"</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Chrome\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"chrome\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:3000\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webRoot\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/src\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sourceMapPathOverrides\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"webpack:///src/*\"</span>: <span class=\"string\">\"$&#123;webRoot&#125;/*\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意⚠️：如果自定义修改了HOST或者PORT,则需要修改相应的地址</p>\n</blockquote>\n<p>配置好了之后，启动<code>yarn start</code>，在<code>VS Code</code>中按<code>F5</code>或者按绿色的debug按钮进行debug。</p>\n<h3 id=\"自定义环境变量\"><a href=\"#自定义环境变量\" class=\"headerlink\" title=\"自定义环境变量\"></a>自定义环境变量</h3><p>环境变量，可以很方便的，根据某些条件，展示不同的数据，比如（根据环境，判断是否需要mock数据）；或者使用一些不在版本控制力的敏感信息；因为是在构建期间运行，所以webpack可以直接进行一些逻辑的判断，不会出现的代码直接会删除，不会进入打包文件。</p>\n<p>在项目工程中，可以使用自定义的环境变量，就像声明在js文件的普通变量一样。默认的，内置了一个<code>NODE_ENV</code>环境变量，其他的环境变量，规定必须要以<code>REACT_APP_</code>开头，以防止和其他环境变量冲突。</p>\n<p>环境变量可以只能在构建期间使用，不能在生产环境中动态使用。如果需要动态获取的话，需要服务器端支持。</p>\n<p>环境变量是定义在<code>process.env</code>对象上的，比如，定义了一个<code>REACT_APP_SECRET_CODE</code>变量，需要在js文件中使用的话，需要用<code>process.env.REACT_APP_SECRET_CODE</code>来获取。</p>\n<p>要获取当前的开发环境，使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.env.NODE_ENV</div></pre></td></tr></table></figure>\n<ul>\n<li><code>npm start</code> 启动的话，这个值永远为<code>development</code> </li>\n<li><code>npm test</code>启动的话，这个值永远为<code>test</code></li>\n<li><code>npm run build</code>启动的话，这个值永远为<code>production</code></li>\n</ul>\n<p><code>NODE_ENV</code>这个环境变量，不允许手动修改,即使修改了也不会生效。</p>\n<p>js中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</div><div class=\"line\">  analytics.disable();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>public/index.html</code>中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>%REACT_APP_WEBSITE_NAME%<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意⚠️：</p>\n<ul>\n<li>除了NODE_ENV和PUBLIC_URL连个环境变量，其他环境变量都需要由REACT<em>APP</em>开头。</li>\n<li>环境变量只有在构建期间有效，运行期间无效。</li>\n</ul>\n</blockquote>\n<p>有两种方式定义环境变量：</p>\n<ol>\n<li><p>shell命令</p>\n<ul>\n<li>windows: <code>set REACT_APP_SECRET_CODE=abcdef&amp;&amp;npm start</code></li>\n<li>Linux,maxOs:<code>REACT_APP_SECRET_CODE=abcdef npm start</code></li>\n</ul>\n<p>这种方式，环境变量只有在shell回话中有效</p>\n</li>\n<li><p><code>.env</code>文件</p>\n<p>为了永久的使用环境变量，需要在根目录中新建一个<code>.env</code>文件</p>\n<p>.env：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">REACT_APP_SECRET_CODE=abcdef</div></pre></td></tr></table></figure>\n<p>.env文件可以添加进版本控制中( <code>.gitignore</code>中配置<code>.env*.local</code> )。</p>\n<p>还有一些其他的文件：</p>\n<ul>\n<li><code>.env</code>：默认</li>\n<li><code>.env.local</code>：本地覆盖，这个在除了test构建，其他所有构建中都有效</li>\n<li><code>.env.development</code>，<code>.env.test</code>，<code>.env.production</code>：指定构建环境中有效</li>\n<li><code>.env.development.local</code>, <code>.env.test.local</code>, <code>.env.production.local</code>：本地覆盖指定构建环境</li>\n</ul>\n<p>这些定义的优先级( 越靠近左边的，优先级越高 )：</p>\n<ul>\n<li><code>npm start</code>: <code>.env.development.local</code>, <code>.env.development</code>, <code>.env.local</code>, <code>.env</code></li>\n<li><code>npm run build</code>: <code>.env.production.local</code>, <code>.env.production</code>, <code>.env.local</code>, <code>.env</code></li>\n<li><code>npm test</code>: <code>.env.test.local</code>, <code>.env.test</code>, <code>.env</code> (注意⚠️：没有 <code>.env.local</code> )</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"能否使用修饰器\"><a href=\"#能否使用修饰器\" class=\"headerlink\" title=\"能否使用修饰器\"></a>能否使用修饰器</h3><p>不能。</p>\n<ul>\n<li>这是一个试验性的建议，可能会改变。</li>\n<li>目前的规格版本没有得到Babel官方的支持。</li>\n<li>如果规范发生变化，将无法编写重构件codemod，因为Facebook内部使用它们。</li>\n</ul>\n<p>如果需要使用，可以使用<code>npm run eject</code>自己用第三方工具配置</p>\n<h3 id=\"开发环境中转发API请求\"><a href=\"#开发环境中转发API请求\" class=\"headerlink\" title=\"开发环境中转发API请求\"></a>开发环境中转发API请求</h3><p>一般生产环境的项目都有如下特征：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/             - 静态服务，返回index.ftl</div><div class=\"line\">/todos        - 静态服务，返回index.ftl</div><div class=\"line\">/api/todos    - 服务器拦截 /api/* 开头的请求，后端执行业务逻辑后返回</div></pre></td></tr></table></figure>\n<p>为了告诉开发服务器，如何重定向一个未知的接口请求，需要在<code>package.json</code>中添加<code>proxy</code>字段，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;proxy&quot;:&quot;http://locahost:8080&quot;</div></pre></td></tr></table></figure>\n<p>当我们发起请求，比如<code>fetch(&#39;/api/todos&#39;)</code>，开发服务器首先确认，当前不是一个静态资源，之后会转发这个请求到<code>http://localhost:8080/api/todos</code>，开发服务器只会尝试转发<code>Accept</code>头部不是<code>text/html</code>的请求。</p>\n<p>转发请求可以避免跨域请求失败：</p>\n<p><code>Fetch API cannot load http://localhost:8080/api/todos. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://localhost:3000&#39; is therefore not allowed access. If an opaque response serves your needs, set the request&#39;s mode to &#39;no-cors&#39; to fetch the resource with CORS disabled.</code></p>\n<p>可以扩展<code>proxy</code>：</p>\n<ul>\n<li><p>自定义代理请求</p>\n<ul>\n<li><p>修改<code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  &quot;proxy&quot;: &#123;</div><div class=\"line\">    &quot;/api&quot;: &#123;</div><div class=\"line\">      &quot;target&quot;: &quot;&lt;url&gt;&quot;,</div><div class=\"line\">      &quot;ws&quot;: true</div><div class=\"line\">      // ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所有的<code>/api</code>开头的请求都会被代理，包括头部<code>Accept</code>是<code>text/html</code>的请求，和默认的配置<code>proxy</code>不一样。</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  &quot;proxy&quot;: &#123;</div><div class=\"line\">    // 代理以 /api 开头的请求</div><div class=\"line\">    &quot;/api&quot;: &#123;</div><div class=\"line\">      &quot;target&quot;: &quot;&lt;url_1&gt;&quot;,</div><div class=\"line\">      &quot;ws&quot;: true</div><div class=\"line\">      // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 代理以 /foo 开头的请求</div><div class=\"line\">    &quot;/foo&quot;: &#123;</div><div class=\"line\">      &quot;target&quot;: &quot;&lt;url_2&gt;&quot;,</div><div class=\"line\">      &quot;ssl&quot;: true,</div><div class=\"line\">      &quot;pathRewrite&quot;: &#123;   // 接口重写</div><div class=\"line\">        &quot;^/foo&quot;: &quot;/foo/beta&quot;</div><div class=\"line\">      &#125;</div><div class=\"line\">      // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 代理 /bar/abc.html 而不是 /bar/sub/def.html</div><div class=\"line\">    &quot;/bar/[^/]*[.]html&quot;: &#123;</div><div class=\"line\">      &quot;target&quot;: &quot;&lt;url_3&gt;&quot;,</div><div class=\"line\">      // ...</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 代理 /baz/abc.html 和 /baz/sub/def.html</div><div class=\"line\">    &quot;/baz/.*/.*[.]html&quot;: &#123;</div><div class=\"line\">      &quot;target&quot;: &quot;&lt;url_4&gt;&quot;</div><div class=\"line\">      // ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>支持WebSocket的代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  &quot;proxy&quot;: &#123;</div><div class=\"line\">    &quot;/socket&quot;: &#123;</div><div class=\"line\">      // 代理的目标websocket服务器</div><div class=\"line\">      &quot;target&quot;: &quot;ws://&lt;socket_url&gt;&quot;,</div><div class=\"line\">      // 标记这是webSocket请求</div><div class=\"line\">      &quot;ws&quot;: true</div><div class=\"line\">      // ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"启动HTTPS\"><a href=\"#启动HTTPS\" class=\"headerlink\" title=\"启动HTTPS\"></a>启动HTTPS</h3><ul>\n<li>Windows：<code>set HTTPS=true&amp;&amp;npm start</code></li>\n<li>Linux,macOS：<code>HTTPS=true npm start</code></li>\n</ul>\n<h3 id=\"在单独的环境中（隔离）开发组件\"><a href=\"#在单独的环境中（隔离）开发组件\" class=\"headerlink\" title=\"在单独的环境中（隔离）开发组件\"></a>在单独的环境中（隔离）开发组件</h3><p>通常，在一个应用程序中，你有很多的UI组件，而且每个组件都有很多不同的状态。 例如，一个简单的按钮组件可能具有以下状态：</p>\n<ul>\n<li>正常的状态下，仅展示文本标签。</li>\n<li>有禁用的模式</li>\n<li>有一个loading状态</li>\n</ul>\n<p>通常，如果不单独跑各个状态的组件，很难一次性看到这些状态。</p>\n<p><code>create-react-app</code>不包含这些开发工具，需要使用第三方插件，来实现同时查看一个组件的所有状态。工具有：</p>\n<ul>\n<li><p><a href=\"https://storybook.js.org/\" target=\"_blank\" rel=\"external\">Storybook for React</a> (<a href=\"https://github.com/storybooks/storybook\" target=\"_blank\" rel=\"external\">source</a>) </p>\n<p>首先，全局安装<code>@storybook/cli</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g @storybook/cli</div></pre></td></tr></table></figure>\n<p>之后，在根目录执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getstorybook</div></pre></td></tr></table></figure>\n<p>之后会自动安装以来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  testReact git:(master) ✗ getstorybook</div><div class=\"line\"></div><div class=\"line\"> getstorybook - the simplest way to add a storybook to your project.</div><div class=\"line\"></div><div class=\"line\"> • Detecting project type. ✓</div><div class=\"line\"> • Adding storybook support to your &quot;Create React App&quot; based project. ✓</div><div class=\"line\"> • Preparing to install dependencies. ✓</div><div class=\"line\"></div><div class=\"line\">yarn install v1.2.1</div><div class=\"line\">[1/4] 🔍  Resolving packages...</div><div class=\"line\">[2/4] 🚚  Fetching packages...</div><div class=\"line\">[3/4] 🔗  Linking dependencies...</div><div class=\"line\">....</div><div class=\"line\"></div><div class=\"line\">✨  Done in 21.32s.</div><div class=\"line\"></div><div class=\"line\"> • Installing dependencies. ✓</div><div class=\"line\"></div><div class=\"line\">To run your storybook, type:</div><div class=\"line\"></div><div class=\"line\">   yarn run storybook</div><div class=\"line\"></div><div class=\"line\">For more information visit: https://storybook.js.org</div></pre></td></tr></table></figure>\n<p>提示你可以通过<code>yarn run storybook</code>来启动<code>storybook</code>。</p>\n</li>\n<li><p><a href=\"https://react-styleguidist.js.org/\" target=\"_blank\" rel=\"external\">React Styleguidist</a> (<a href=\"https://github.com/styleguidist/react-styleguidist\" target=\"_blank\" rel=\"external\">source</a>) </p>\n</li>\n</ul>\n<p>这些工具可以单独部署，这样子团队中的其他人就可以直接查看组件的各个状态，而不需要启动服务器。</p>\n<h3 id=\"默认支持渐进式Web应用\"><a href=\"#默认支持渐进式Web应用\" class=\"headerlink\" title=\"默认支持渐进式Web应用\"></a>默认支持渐进式Web应用</h3><p> <code>create-react-app</code>创建的项目默认就会支持 [渐进式web应用(PWA)] ，会使用 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/service-workers\" target=\"_blank\" rel=\"external\">service workers</a> 实现 <a href=\"https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network\" target=\"_blank\" rel=\"external\">缓存优先策略</a> 来优化用户再次访问应用的速度。什么是service workers?</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/service-workerss-falling-back-to-network.png\" alt=\"service-worker\"></p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/from-serviceWorkerwhats-new-in-create-react-app-03.png\" alt=\"from serviceWorker\"></p>\n<p>当然，你也可以通过设置默认不开启这个特性，但是如果你在开发新的应用，推荐使用，特别在移动端Android设备上，能加速Web App的启动。</p>\n<p>已缓存的项目，如果想禁用<code>service-worker</code>，可以直接调用<code>unregister</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; unregister &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./registerServiceWorker'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"客户端路由\"><a href=\"#客户端路由\" class=\"headerlink\" title=\"客户端路由\"></a>客户端路由</h3><p>如果客户端使用的是HTML5的<code>pushState history API</code>，许多静态资源文件请求将会失败。比如，请求页面<code>/todos/42</code>，开发服务器会运行很好，但是生产环境将会失败。因为后台程序并没有配置<code>/todos/42</code>这个路由，会返回404。</p>\n<p>NODE的解决方案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.get( '/api/*' , ()=&gt;&#123; // .... &#125; )</span></div><div class=\"line\">app.get(<span class=\"string\">'/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.sendFile(path.join(__dirname, <span class=\"string\">'build'</span>, <span class=\"string\">'index.html'</span>));</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"打包到相对路径\"><a href=\"#打包到相对路径\" class=\"headerlink\" title=\"打包到相对路径\"></a>打包到相对路径</h3><p>默认的<code>create-react-app</code>会讲打包的默认路径设置为服务器的根目录<code>/</code>。</p>\n<p>要覆盖默认的设置，需要在<code>package.json</code>中，设置<code>homepage</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"homepage\": \"http://kf.netease.com/index\",</div></pre></td></tr></table></figure>\n<p>设置之后，<code>create-react-app</code>就知道了项目的根目录是：<code>/index</code>。</p>\n<p>之后生成的html文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index/favicon.ico\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index/static/css/main.6cfcf8f6.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/index/static/js/main.4dc8f75a.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"基于进程对象process将日志、错误写入不同文件","url":"http://www.maotingfeng.me/2017/06/30/基于进程对象process将日志、错误写入不同文件/","content":"<p><a href=\"http://itbilu.com/nodejs/core/EyEJTxF8.html\" target=\"_blank\" rel=\"external\"><code>process</code></a>同样是一个全局对象，它提供了对标准流的访问接口。而<code>process.stdout</code>和<code>process.stderr</code>都是<a href=\"http://itbilu.com/nodejs/core/VyJhveS7l.html\" target=\"_blank\" rel=\"external\">可写流</a>，要将<code>process.stdout</code>和<code>process.stderr</code>中的数据写入不同的文件，首先需要将其转换为一个<a href=\"http://itbilu.com/nodejs/core/4JJTifN7l.html\" target=\"_blank\" rel=\"external\">可读流</a>或<a href=\"http://itbilu.com/nodejs/core/VkE2Y0GQl.html#stream-duplex-transform\" target=\"_blank\" rel=\"external\">双工流</a>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> stream = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> rawStdout = process.stdout;</div><div class=\"line\"><span class=\"keyword\">const</span> rawStderr = process.stderr;</div><div class=\"line\"><span class=\"comment\">// 创建一个PassThrough流</span></div><div class=\"line\"><span class=\"keyword\">const</span> newStdout = <span class=\"keyword\">new</span> stream.PassThrough();</div><div class=\"line\"><span class=\"keyword\">const</span> newStderr = <span class=\"keyword\">new</span> stream.PassThrough();</div><div class=\"line\"><span class=\"comment\">// 重新定义 process.stdout 的Getter</span></div><div class=\"line\">process.__defineGetter__(<span class=\"string\">'stdout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 原样返回  PassThrough</span></div><div class=\"line\">  <span class=\"keyword\">return</span> newStdout;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 重新定义 process.stderr 的Getter</span></div><div class=\"line\">process.__defineGetter__(<span class=\"string\">'stderr'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 原样返回  PassThrough</span></div><div class=\"line\">  <span class=\"keyword\">return</span> newStderr;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 将 process.stdout 中的数据写入 stdout.log 文件</span></div><div class=\"line\">newStdout.pipe(fs.createWriteStream(<span class=\"string\">'./stdout.log'</span>));</div><div class=\"line\"><span class=\"comment\">// 将 process.stderr 中的数据写入 stderr.log 文件</span></div><div class=\"line\">newStderr.pipe(fs.createWriteStream(<span class=\"string\">'./stderr.log'</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'向 stdout 中写入数据'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.error(<span class=\"string\">'向 stderr 中写入数据'</span>);</div></pre></td></tr></table></figure>\n<p>按这个来可以实现一个基础版的日志，不过<code>fs.createWriteStream</code>方法最好用追加的模式<code>newStdout.pipe(fs.createWriteStream(&#39;./stdout.log&#39;,{&#39;flags&#39;:&#39;a&#39;}));</code>这样子每次重启就不会把之前的日志覆盖掉了。按目前的代码，可以很好的工作。</p>\n<p>然后当我的程序在express中跑的时候，会发现<code>console.log</code>输入的内容直接在控制台中打印？而对应的日志文件<code>stdout.log</code>为空，怎么运行不了了？我的日志呢？</p>\n<p>追查原因，发现是代码引入了consolidate（多模版引擎共存<code>v0.14.1</code>）模块引入问题，继续追查，发现是consolidate中引入的bluebird模版的问题，继续追查，发现是bluebird.js引入的promise.js的问题，继续追查，发现是promise.js引入的debuggability.js的问题。debugger半天，代码终于停留在了让我感觉毛骨悚然的地方,代码第802行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">\"undefined\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.warn !== <span class=\"string\">\"undefined\"</span></div></pre></td></tr></table></figure>\n<p>细看一下，不就是判断console是否为undefined吗？接着校验console.warn是否为undefined吗？怎么回事？</p>\n<p>先看看代码正常的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stream_mao = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> rawStdout = process.stdout;</div><div class=\"line\"><span class=\"keyword\">var</span> rawStderr = process.stderr;</div><div class=\"line\"><span class=\"comment\">// 创建一个PassThrough流</span></div><div class=\"line\"><span class=\"keyword\">var</span> newStdout = <span class=\"keyword\">new</span> stream_mao.PassThrough();</div><div class=\"line\"><span class=\"keyword\">var</span> newStderr = <span class=\"keyword\">new</span> stream_mao.PassThrough();</div><div class=\"line\"><span class=\"comment\">// 重新定义 process.stdout 的Getter</span></div><div class=\"line\">process.__defineGetter__(<span class=\"string\">'stdout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 原样返回  PassThrough</span></div><div class=\"line\">    <span class=\"keyword\">return</span> newStdout;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 重新定义 process.stderr 的Getter</span></div><div class=\"line\">process.__defineGetter__(<span class=\"string\">'stderr'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 原样返回  PassThrough</span></div><div class=\"line\">    <span class=\"keyword\">return</span> newStderr;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 将 process.stdout 中的数据写入 stdout.log 文件</span></div><div class=\"line\">newStdout.pipe(fs.createWriteStream( process.cwd() + <span class=\"string\">'/stdout.log'</span>,&#123;<span class=\"string\">'flags'</span>:<span class=\"string\">'a'</span>&#125;));</div><div class=\"line\"><span class=\"comment\">// 将 process.stderr 中的数据写入 stderr.log 文件</span></div><div class=\"line\">newStderr.pipe(fs.createWriteStream(process.cwd() + <span class=\"string\">'/stderr.log'</span>,&#123;<span class=\"string\">'flags'</span>:<span class=\"string\">'a'</span>&#125;));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'向 stdout 中写入数据'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.error(<span class=\"string\">'向 stderr 中写入数据'</span>);</div></pre></td></tr></table></figure>\n<p>控制台测试：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/process_stdout_success.png\" alt=\"process_stdout_success控制台打印\"></p>\n<p>日志写入成功。</p>\n<p>接着看看添加那句逻辑运算符代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stream_mao = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> rawStdout = process.stdout;</div><div class=\"line\"><span class=\"keyword\">var</span> rawStderr = process.stderr;</div><div class=\"line\"><span class=\"comment\">// 创建一个PassThrough流</span></div><div class=\"line\"><span class=\"keyword\">var</span> newStdout = <span class=\"keyword\">new</span> stream_mao.PassThrough();</div><div class=\"line\"><span class=\"keyword\">var</span> newStderr = <span class=\"keyword\">new</span> stream_mao.PassThrough();</div><div class=\"line\"><span class=\"comment\">// 就添加了这行代码，其他不变</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">\"undefined\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.warn !== <span class=\"string\">\"undefined\"</span>;</div><div class=\"line\"><span class=\"comment\">// 重新定义 process.stdout 的Getter</span></div><div class=\"line\">process.__defineGetter__(<span class=\"string\">'stdout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 原样返回  PassThrough</span></div><div class=\"line\">    <span class=\"keyword\">return</span> newStdout;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 重新定义 process.stderr 的Getter</span></div><div class=\"line\">process.__defineGetter__(<span class=\"string\">'stderr'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 原样返回  PassThrough</span></div><div class=\"line\">    <span class=\"keyword\">return</span> newStderr;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 将 process.stdout 中的数据写入 stdout.log 文件</span></div><div class=\"line\">newStdout.pipe(fs.createWriteStream( process.cwd() + <span class=\"string\">'/stdout.log'</span>,&#123;<span class=\"string\">'flags'</span>:<span class=\"string\">'a'</span>&#125;));</div><div class=\"line\"><span class=\"comment\">// 将 process.stderr 中的数据写入 stderr.log 文件</span></div><div class=\"line\">newStderr.pipe(fs.createWriteStream(process.cwd() + <span class=\"string\">'/stderr.log'</span>,&#123;<span class=\"string\">'flags'</span>:<span class=\"string\">'a'</span>&#125;));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'向 stdout 中写入数据'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.error(<span class=\"string\">'向 stderr 中写入数据'</span>);</div></pre></td></tr></table></figure>\n<p>控制台测试：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/process_stdout_error.png\" alt=\"process_stdout_error控制台打印\"></p>\n<p>也就是日志文件没写入。</p>\n<p>我就在第8行加了这句诡异的代码，我的世界就崩溃了。。。</p>\n<p>我的node版本是：<code>v0.12.7</code>，应该是系统问题，不是引入的第三方模块的问题，有解决方案的可以共享</p>\n"},{"title":"koa简介","url":"http://www.maotingfeng.me/2017/03/26/koa简介/","content":"<h2 id=\"koa简介\"><a href=\"#koa简介\" class=\"headerlink\" title=\"koa简介\"></a>koa简介</h2><p>初试koa，看了下官网介绍，记录一下学习心得。</p>\n<p>koa是致力于成为一个更小、更健壮、更富有表现力的 Web 框架。跟express相比，最核心的部分就是用新的async function 解决了回调函数的噩梦。</p>\n<p>比如用express实现一个计算程序处理时间的功能，用express写法，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use( <span class=\"string\">'/'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> req , res , next </span>)</span>&#123;</div><div class=\"line\">  req.startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() ;</div><div class=\"line\">  next() ;</div><div class=\"line\">&#125; ) ;</div><div class=\"line\"></div><div class=\"line\">app.use( <span class=\"string\">'/'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> req , res , next </span>)</span>&#123;</div><div class=\"line\">  req.endTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() ;</div><div class=\"line\">  res.end( <span class=\"string\">'time diff: '</span> + ( req.startTime - req.endTime ) + <span class=\"string\">'ms'</span> ) ;</div><div class=\"line\">&#125; ) ;</div></pre></td></tr></table></figure>\n<p>express的中间件形式，需要每个中间件手动调用next函数，把执行权限移交到下一个注册的中间件。</p>\n<p>如果用koa来写，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>( <span class=\"string\">'koa'</span> ) ;</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">app.use(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  <span class=\"keyword\">await</span> next();</div><div class=\"line\">  <span class=\"keyword\">const</span> timeDiff = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - startTime;</div><div class=\"line\">  ctx.body = <span class=\"string\">`time diff: <span class=\"subst\">$&#123;timeDiff&#125;</span>ms`</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3001</span>);</div></pre></td></tr></table></figure>\n<p>相对而言，代码简单了很多。想要学习koa，先要学习一下基础知识点，async函数。</p>\n<h3 id=\"koa的代码级联\"><a href=\"#koa的代码级联\" class=\"headerlink\" title=\"koa的代码级联\"></a>koa的代码级联</h3><p>代码级联是通过async函数实现的（Koa v2.x 移除了内置的 Generator 支持，使用 async 函数替代），先简单介绍下async函数，语法很简单:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncFunc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 函数体</span></div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">await</span> fetchSomeThing() ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>async函数返回一个promise对象，所以可以使用then方法添加回调函数。当函数体执行的时候，遇到await的时候，会执行后面的表达式，表达式可以是原始值类型或者返回Promise对象。如果是个异步表达式的话，javascript会中断本次执行，执行其他内容。等异步执行结束，会返回到上次中断的地方，继续往下执行。</p>\n<p>比如，我想中断两秒钟，返回一个hello world！。代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delayTwoSeconds</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( ( resolve , reject )=&gt;&#123;</div><div class=\"line\">        setTimeout( resolve.bind(<span class=\"literal\">null</span>,<span class=\"string\">'hello world!'</span>) , <span class=\"number\">2000</span> ) ;</div><div class=\"line\">    &#125; ) ;</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\">delayTwoSeconds().then( data=&gt;<span class=\"built_in\">console</span>.log( data ) ) ;  <span class=\"comment\">// 2m后，控制台：hello world!</span></div></pre></td></tr></table></figure>\n<p>当执行的时候，result并不会立即返回，而是等待2秒，然后返回。</p>\n<p>用async函数有什么好处？</p>\n<ul>\n<li>代码结构清晰，执行过程明了，避免了回调嵌套的代码</li>\n<li>函数的作用域得以保存，不再用callback( data ) 函数传参</li>\n<li>易于错误的捕获</li>\n</ul>\n<p>第三点,怎么错误捕获？平常如果异步回调函数执行的时候，一般都是在callback中，捕获错误 , 因为当执行异步操作的时候，异步函数代码执行完毕，javascript执行其他内容的时候，函数的资源会被垃圾回收，等事件机制通知回调函数的时候，原来的资源早已不在，所以如果发生错误，也是只能通过函数传参。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> error , data </span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( error ) &#123; <span class=\"keyword\">throw</span> error ; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而使用async函数，因为函数只是暂停执行，里面的变量并不会被回收，所以可以继续使用。</p>\n<p>koa利用了async的特性，让嵌套中间件执行之后，不用通过绑定全局变量，或者在<code>request对象</code>上绑定属性来传参了，直接在函数体里面用之前定义的变量，方便了很多。koa的async调用机制的介绍完毕，下面是一些常用api的说明。</p>\n<h3 id=\"Koa配置\"><a href=\"#Koa配置\" class=\"headerlink\" title=\"Koa配置\"></a>Koa配置</h3><p>koa的应用程序配置默认在app实例上，目前支持</p>\n<ul>\n<li>app.env 默认为<code>NODE_ENV</code>，如果没有配置的话，为<code>&quot;development&quot;</code></li>\n<li>app.proxy 当设置为true时，支持 X-Forwarded-Host</li>\n<li>app.subdomainOffset 子域名偏移量，属性默认为2，如域名“tobi.ferrets.example.com” 执行：ctx.subdomains 返回[“ferrets”, “tobi”]，如果app.subdomainOffset设为3，则返回[“tobi”]。</li>\n</ul>\n<h3 id=\"app-listen-…-监听端口\"><a href=\"#app-listen-…-监听端口\" class=\"headerlink\" title=\"app.listen( … )监听端口\"></a>app.listen( … )监听端口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);  <span class=\"comment\">// 启动3000端口</span></div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</div><div class=\"line\">http.createServer(app.callback()).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>还是使用了node内置的http模块</p>\n<h3 id=\"app-callback\"><a href=\"#app-callback\" class=\"headerlink\" title=\"app.callback()\"></a>app.callback()</h3><p>执行这个函数返回的函数可以用于处理<code>http.createServer()</code>的请求，也可以用这个回调函数将你的koa应用挂载在express或者Connect应用中。</p>\n<h3 id=\"app-use-middleWare\"><a href=\"#app-use-middleWare\" class=\"headerlink\" title=\"app.use(middleWare)\"></a>app.use(middleWare)</h3><p>koa中这个方法很常用了，将给定的middleWare当作中间件加载到应用中。<code>middleWare</code>接受两个参数<code>ctx</code>和<code>next</code>,第一个参数是上下文，第二个参数是执行下一个中间件的回调。</p>\n<h3 id=\"app-context\"><a href=\"#app-context\" class=\"headerlink\" title=\"app.context\"></a>app.context</h3><p><code>app.context</code>是middleWare第一个参数ctx实例的原型。想要给ctx添加属性，可以直接编辑app.context。对于在应用程序中经常使用的属性或者函数，这个api非常有用。不过不建议过度依赖，毕竟类似全局变量，而全局变量是evil的😈。官网给的例子，比如数据库实例可以挂在到ctx上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.context.db = db();</div><div class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(ctx.db);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>默认所有的错误都通过<code>stderr</code>输出，如果设置了<code>app.silent</code>为true的话，就不输出。当err.status是404或者err.expose等于true，则默认不输出。如果想自定义错误处理逻辑, 可以定义一个「错误事件」来监听 Koa app 中发生的错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.on(<span class=\"string\">'error'</span>, err =&gt;</div><div class=\"line\">  log.error(<span class=\"string\">'server error'</span>, err)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>当 req/res 周期中出现任何错误且无法响应客户端时，Koa 会把 <code>Context</code>(上下文) 实例作为第二个参数传递给 error 事件。当错误发生时，如果还没有数据返回客户端，koa会响应500 内部错误给客户端，并且会触发app-level的<code>error</code>事件，可以用来记录日志。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h2><p>一个koa的Context封装了node原生的request和response对象，提供了一些方便的API供应用程序开发。</p>\n<p>随着每个request请求，都会创建一个新的Context，当中间件被调用时，它会被会传到给每个中间件的第一个参数中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</div><div class=\"line\">  ctx; <span class=\"comment\">// is the Context</span></div><div class=\"line\">  ctx.request; <span class=\"comment\">// is a koa Request</span></div><div class=\"line\">  ctx.response; <span class=\"comment\">// is a koa Response</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>ctx中的很多访问器和方法，简单代理了ctx.request或者ctx.resposne ，因为有些高频API，直接代理了方便使用。比如<code>ctx.type</code>和<code>ctx.length</code>代理了response对象,<code>ctx.path</code>和<code>ctx.method</code>代理了request对象。</p>\n<ul>\n<li><p>ctx.req node的request对象</p>\n</li>\n<li><p>ctx.res node的resposne对象</p>\n<p>   避开koa，而直接操作node底层的response对象要避免。比如</p>\n<ul>\n<li>res.statusCode</li>\n<li>res.writeHead()</li>\n<li>res.write()</li>\n<li>res.end()</li>\n</ul>\n</li>\n<li><p>ctx.request koa的request对象</p>\n</li>\n<li><p>cox.response koa的response对象</p>\n</li>\n<li><p>ctx.state koa推荐挂载数据的地方，比如用户信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.state.user = <span class=\"keyword\">await</span> User.find(id) ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>ctx.app 应用程序实例</p>\n</li>\n<li><p>cox.throw 自定义状态码响应的方法。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.throw(403);</div><div class=\"line\">ctx.throw(&apos;name required&apos;, 400);</div><div class=\"line\">ctx.throw(400, &apos;name required&apos;);</div><div class=\"line\">ctx.throw(&apos;something exploded&apos;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>cox.respond 如不想使用koa内置的response处理方法，可以设置this.respond=false，跳过koa针对response的预处理，你可以自己设置response对象。算是一种hack方法吧，一般不常用</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a>Request</h3><p>简单介绍一下koa的request对象，一些常用的API</p>\n<ul>\n<li>request.header 请求头</li>\n<li>request.method 请求方法</li>\n<li>request.length 请求头的Context-Length</li>\n<li>request.originalUrl 获取request的originalUrl</li>\n<li>request.origin origin URL，包括，protocol和host</li>\n<li>request.path 请求路径</li>\n<li>request.querystring 查询参数 , 不包括？</li>\n<li>request.search 原始的query string，包括？</li>\n<li>request.query   结构化了的查询参数</li>\n</ul>\n<p>….</p>\n<h3 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h3><p>简单介绍一下koa的response对象，一些常用的API</p>\n<ul>\n<li>response.header  响应对象</li>\n<li>response.status   响应状态，默认无值</li>\n<li>response.message  响应消息，一般和状态码一起设置</li>\n<li>response.length  设置响应的大小</li>\n<li>response.body   返回响应内容</li>\n<li>response.get(field)   获取响应的头部字段</li>\n<li>response.set(field,value)  设置响应头的内容</li>\n<li>response.append(field,value)  追加额外的头部字段内容</li>\n<li>response.redirect( url , [alt] )  重定向，可以自定’back’，能提供Referrer支持，没有时，可用alt指定</li>\n<li>response.lastModified  如果响应头部包含Last-Modified，则用Date对象返回</li>\n</ul>\n<p>…..</p>\n<p>具体API可以查看本文后面的官网链接。</p>\n<p>最后介绍一个debug模块的使用</p>\n<p>通常我们开发环境需要使用console来打印调试一些内容，但是生产环境又不需要这些内容，可以使用debug模块，debug模块可以对log进行分组，而且只有设置了DEBUG的情况下，才会输出内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install debug</div></pre></td></tr></table></figure>\n<p>接下来在代码中引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'app'</span>);   <span class=\"comment\">// 这里自定现实哪一块DEBUG的内容</span></div><div class=\"line\">app.use(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ctx, next </span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> config = ctx.app ;</div><div class=\"line\">    debug(<span class=\"string\">'env: %s'</span>,config.env) ;</div><div class=\"line\">    ctx.body = config.env;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>接下来就可以启动了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DEBUG=app node index.js</div></pre></td></tr></table></figure>\n<p>参考文档：</p>\n<p><a href=\"http://koajs.com/\" target=\"_blank\" rel=\"external\">Koa next generation web framework for node.js</a></p>\n<p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></p>\n"},{"title":"npm link的使用","url":"http://www.maotingfeng.me/2017/01/16/npm-link的使用/","content":"<h2 id=\"npm-link的使用\"><a href=\"#npm-link的使用\" class=\"headerlink\" title=\"npm link的使用\"></a>npm link的使用</h2><h6 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h6><p>npm link在开发公共模块的时候很有用，当你本地开发一个公共模块时，又在自己的本地项目用到，原始的做法可能是，把公共模块，拷贝到本地项目的node_modules模块里，然后本地开发的同时，调试公共模块，这样子虽然简单但是低效。</p>\n<p>npm的link命令提供了简单高效的办法，在公共模块目录下，执行<code>npm link</code>命令，会在全局<code>node_modules</code>目录下生成一个符号链接，指向本地公共模块的目录。然后在本地项目直接require进来即可，系统最后会找到全局目录下的公共模块。</p>\n<p>例1-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  testlink npm link</div><div class=\"line\">npm WARN hello1@ No description</div><div class=\"line\">npm WARN hello1@ No repository field.</div><div class=\"line\">npm WARN hello1@ No license field.</div><div class=\"line\">/usr/local/lib/node_modules/testlink -&gt; /Users/[yourHomePath]/demo/testlink</div></pre></td></tr></table></figure>\n<h6 id=\"可执行脚本的开发\"><a href=\"#可执行脚本的开发\" class=\"headerlink\" title=\"可执行脚本的开发\"></a>可执行脚本的开发</h6><p>可执行脚本可以方便执行一些常用的命令，免去手动重复性的动作。</p>\n<p>可执行脚本sayHello：</p>\n<p>例1-2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"string\">'hello world!'</span> , process.argv[<span class=\"number\">2</span>] )</div></pre></td></tr></table></figure>\n<p>然后修改sayHello文件的权限（读取r的权限等于4；写入w的权限等于2；执行x的权限等于1。7（4+2+1 | 读取+写入+执行））</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 755 sayHello</div></pre></td></tr></table></figure>\n<p>执行上述命令，sayHello就可以执行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./sayHello</div></pre></td></tr></table></figure>\n<p>这种形式，需要每次执行sayHello命令需要加上路径前缀。更合理的做法是使用bin。</p>\n<p>在公共模块的package.json文件里加上如下代码</p>\n<p>例1-3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"testlink\"</span> ,</div><div class=\"line\">    <span class=\"string\">\"bin\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"hello\"</span> : <span class=\"string\">\"sayHello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>name执行公共模块的名字，bin执行需要全局加入的可执行命令。bin的键，全局执行的命令名，键值执行全局命令的具体可执行文件，例如<code>&quot;hello&quot;: &quot;./bin/sayHello&quot;</code>表示当前目录下的bin目录，里面的sayHello可执行文件。</p>\n<p>接下来，在公共模块的目录下，执行npm link命令</p>\n<p>例1-4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  testlink npm link</div><div class=\"line\">npm WARN testlink@ No description</div><div class=\"line\">npm WARN testlink@ No repository field.</div><div class=\"line\">npm WARN testlink@ No license field.</div><div class=\"line\">/usr/local/bin/hello -&gt; /usr/local/lib/node_modules/testlink/sayHello</div><div class=\"line\">/usr/local/lib/node_modules/testlink -&gt; /Users/[yourHomePath]/demo/testlink</div></pre></td></tr></table></figure>\n<p>可以看出hello的全局执行的命令名，映射到了<code>/usr/local/lib/node_modules/testlink/sayHello</code>这个具体的可执行文件（ 注意⚠️，全局node_modules下的testlink目录是个符号链接，但是读写效果和具体文件路径一样 ）。然后<code>/usr/local/lib/node_modules/testlink</code>全局的模块(符号链接)，映射到了具体本地的<code>/Users/[yourHomePath]/demo/testlink</code>公共模块开发目录。</p>\n<p>接下来，执行sayHello可执行文件不需要加上路径前缀了，在任何目录下，执行</p>\n<p>例1-5</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello &apos;abc&apos;</div><div class=\"line\"># 打印出</div><div class=\"line\">hello world! abc</div></pre></td></tr></table></figure>\n<p>现在比每次加目录前缀方便多了。</p>\n<blockquote>\n<p>参考资料</p>\n<p>1、<a href=\"http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html\" target=\"_blank\" rel=\"external\">《Node.js 命令行程序开发教程》</a></p>\n</blockquote>\n"},{"title":"Math对象","url":"http://www.maotingfeng.me/2017/01/16/Math对象/","content":"<h4 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h4><p>静态函数</p>\n<ul>\n<li><p>Math.abs()</p>\n<p>计算绝对值，当不是数字时，返回NaN。</p>\n</li>\n<li><p>Math.acos()</p>\n<p>计算反余弦值，参数是-1~1之间的数字</p>\n</li>\n<li><p>Math.asin()</p>\n<p>计算反正弦值，参数是-1~1之间的数字</p>\n</li>\n<li><p>Math.atan()</p>\n<p>计算反正切值，返回值介于-π/2~π/2弧度之间</p>\n</li>\n<li><p>Math.atan2()</p>\n<p>计算从x轴到指定点的角度，x轴正半轴与指定点(x,y)之间沿逆时针方向的夹角，值介于-π~π弧度之间。</p>\n</li>\n<li><p>Math.ceil()</p>\n<p>对一个数字向上取整，大于或等于x的最接近的数</p>\n</li>\n<li><p>Math.cos()</p>\n<p>计算余弦值</p>\n</li>\n<li><p>Math.exp()</p>\n<p>计算e^x，e的x次方</p>\n</li>\n<li><p>Math.floor()</p>\n<p>对一个数字向下取整，返回最接近小于或者等于x的整数</p>\n</li>\n<li><p>Math.log()</p>\n<p>计算自然对数</p>\n</li>\n<li><p>Math.max()</p>\n<p>返回最大的参数，0个或者多个值；没有参数将返回：-Infinity</p>\n</li>\n<li><p>Math.min()</p>\n<p>返回最小的参数，任意数量的参数；没有参数将返回:Infinity</p>\n</li>\n<li><p>Math.pow()</p>\n<p>计算乘方x^y</p>\n</li>\n<li><p>Math.random()</p>\n<p> 返回一个伪随机数</p>\n</li>\n<li><p>Math.round()</p>\n<p>四舍五入</p>\n</li>\n<li><p>Math.sin()</p>\n<p>计算正弦值</p>\n</li>\n<li><p>Math.sqrt()</p>\n<p>计算平方根</p>\n</li>\n<li><p>Math.tan()</p>\n<p>计算正切值</p>\n</li>\n</ul>\n<p>math常量</p>\n<ul>\n<li><p>Math.E</p>\n<p>常量e，自然对数的底数</p>\n</li>\n<li><p>Math.LN10</p>\n<p>10的自然对数</p>\n</li>\n<li><p>Math.LN2</p>\n<p>2的自然对数</p>\n</li>\n<li><p>Math.LOG10E</p>\n<p>e以10为底的对数</p>\n</li>\n<li><p>Math.LOG2E</p>\n<p>e以2为底的对数</p>\n</li>\n<li><p>Math.PI</p>\n<p>常量π</p>\n</li>\n<li><p>Math.SQRT1_2</p>\n<p>2的平方根的倒数</p>\n</li>\n<li><p>Math.SQRT2</p>\n<p>2的平方根</p>\n</li>\n</ul>\n<blockquote>\n<p>参考资料</p>\n<p>《JavaScript权威指南》</p>\n</blockquote>\n"},{"title":"当display:table-cell的元素设置了position:absolute失效的bug","url":"http://www.maotingfeng.me/2017/01/13/当display-table-cell的元素设置了position-absolute失效的bug/","content":"<h2 id=\"当display-table-cell的元素设置了position-absolute失效的bug\"><a href=\"#当display-table-cell的元素设置了position-absolute失效的bug\" class=\"headerlink\" title=\"当display-table-cell的元素设置了position-absolute失效的bug\"></a>当display-table-cell的元素设置了position-absolute失效的bug</h2><p>问题复现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>01 Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">            <span class=\"selector-id\">#banner</span> &#123;</div><div class=\"line\">              <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">              <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">              <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">              <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">              <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">              <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">              <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">              <span class=\"attribute\">background-color</span>: <span class=\"number\">#f00</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"banner\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://lh3.googleusercontent.com/-aVJFt11BsXk/AAAAAAAAAAI/AAAAAAAAAAA/AKB_U8u7r4-EjGt5Fx6T-2ESqGLFt4xfxQ/s32-c-mo/photo.jpg\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>预览效果：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/display-cell-relative.jpeg\" alt=\"display-cell-relative\"></p>\n<p>但是当把<code>#banner</code>的postion属性设置成<code>absolute</code>时，display:table-cell就失效了，#banner就变回了普通的display:div元素了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#banner</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;\t\t<span class=\"comment\">/*从relative改成absolute*/</span></div><div class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f00</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>预览效果</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/display-cell-absolute.jpeg\" alt=\"display-cell-absolute\"></p>\n<p>原因是：</p>\n<blockquote>\n<p>The declaration <code>position: absolute</code> takes your element out from wherever it is and place it relative to innermost element that is not declared static. In no longer participate in the alignment of any other element, hence it no longer serve as table-cell (the declaration has no effect). </p>\n<p>声明为absolute将元素从任何位置移出，并将其放置为相对于未声明为static的最内层元素。 不再参与任何其他元素的对齐，因此它不再用作表格单元格（声明没有效果）[google翻译]。 </p>\n</blockquote>\n<p>就是应用positioin absolute之后table-cell的属性就会失效。</p>\n<p>解决办法：</p>\n<ul>\n<li>也就只能再包裹一层元素了。不要把absolute应用在table-cell的属性上！</li>\n<li>不用table-cell的话，用css3的flex也能解决垂直居中的问题，而且无absolute的这个问题。<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">Flex 布局教程</a></li>\n</ul>\n<p>看MDN上，对display属性的定义和对position属性的定义未找到相关信息。就用了stakoverflow上的这个答案。</p>\n<blockquote>\n<p>参考资料：</p>\n<p>1、<a href=\"http://stackoverflow.com/questions/1608983/why-display-table-cell-is-broken-when-position-absolute\" target=\"_blank\" rel=\"external\">《why-display-table-cell-is-broken-when-position-absolute》</a></p>\n<p>2、<a href=\"https://davidwalsh.name/table-cell-position-absolute\" target=\"_blank\" rel=\"external\">《Table Cell and Position Absolute》</a></p>\n<p>3、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\" target=\"_blank\" rel=\"external\">《display MDN》</a></p>\n<p>4、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\" target=\"_blank\" rel=\"external\">《position MDN》</a></p>\n</blockquote>\n"},{"title":"仓库插件小工具","url":"http://www.maotingfeng.me/2017/01/12/仓库插件小工具/","content":"<h3 id=\"仓库插件小工具\"><a href=\"#仓库插件小工具\" class=\"headerlink\" title=\"仓库插件小工具\"></a>仓库插件小工具</h3><ul>\n<li><p>Sylvester (<a href=\"http://sylvester.jcoglan.com/\" target=\"_blank\" rel=\"external\">官网</a>)是一个对向量和矩阵进行数学运算的javascript 类库 ，而不需要进行大量的循环 。 它能够对任意维度的向量和矩阵进行模型化 ，使用它 ，你可以根据数学公式 ，写出简单易读 ，面向对象的代码 。 例如 ：你可以以这种方式进行向量乘法 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> V1 = $V([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> V2 = $V([<span class=\"number\">9</span>,<span class=\"number\">-3</span>,<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = V1.dot(V2);</div><div class=\"line\"><span class=\"comment\">// d is 15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = V1.cross(V2);</div><div class=\"line\"><span class=\"comment\">// c is the vector (15,45,-45)</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"JavaScript键盘事件","url":"http://www.maotingfeng.me/2017/01/12/JavaScript键盘事件/","content":"<h2 id=\"Javascript键盘事件\"><a href=\"#Javascript键盘事件\" class=\"headerlink\" title=\"Javascript键盘事件\"></a>Javascript键盘事件</h2><ul>\n<li><em>keydown和keyup事件</em>（低级事件），当用户在键盘上按下或者释放按键时，会发生keydown和keyup事件。它们由辅助键、功能键和字母键产生，如果用户按键时间足够长会导致它开始重复，那么keyup事件到达之前会收到多个keydown事件。<ul>\n<li>事件对象有个数字属性keyCode，对于可打印字符，keyCode值时按键上出现的字符的Unicode编码。对于字母键，无论是否开启大写，总是返回大写的keyCode，数字键盘也一样，对于是否按下shift，返回的总是一样的。</li>\n<li>事件对象有altKey、ctrKey、metaKey、shiftKey属性，当对应的辅助键被按下，它们会被设置为true。</li>\n<li>3级dom事件草案，定义了新的事件对象属性key，它会以字符串的形式包含键名。如果是可打印字符，key属性仅仅是这个打印字符，如果是功能键，则会类似’F2’、’Home’、’Left’这样子的值。</li>\n</ul>\n</li>\n<li><em>keypress事件</em>（较高级事件）,它表示产生了一个可打印字符，表示输入的单个字符，以数字Unicode编码的形式，所以必须用String.fromCharCode()把它转换成字符串。<ul>\n<li>大多数浏览器，事件对象的keyCode属性指定了输入的字符编码。可用<code>var char = String.fromCharCode( event.keyCode )</code>获取字符。但是firefox使用的是charCode属性，获取字符需要<code>var char = String.fromCharCode( event.charCode )</code>，而且在firefox中，产生非打印字符时也触发keypress事件（大多数浏览器只有产生了可打印字符时，触发keypress事件），所以为了区分这种情况，可用存在charCode属性，但是值为0做检测。</li>\n</ul>\n</li>\n<li><em>textinput事件</em>（高级事件）,3级DOM事件规范草案定义，不管来源（例如：键盘、黏贴、或拖放形式的数据传输、亚洲语言输入法、声音或手写识别系统），无论何时用户输入文本时，都会触发。textinput事件尚未得到支持，但Webkit浏览器支持非常类似的<em>textInput</em>事件。规范的textinput事件和Webkit的textInput事件都有相似的事件对象：<ul>\n<li>事件对象有一个data属性，用于保存输入的文本。</li>\n<li>事件对象的inputMethod属性，用于指定输入源，不过尚未实现。</li>\n</ul>\n</li>\n</ul>\n<p>可通过取消textinput、textInput、和keypress事件来阻止字符的输入。一个例子，用来过滤用户输入</p>\n<p>例1-1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">*InputFilter.js：不唐突地过滤＜input＞元素的键盘输入</div><div class=\"line\">*</div><div class=\"line\">*这个模块查找文档中拥有\"data-allowed-chars\"属性的所有＜input type=\"text\"＞元素</div><div class=\"line\">*它为所有这类元素都注册keypress、textInput和textinput事件处理程序，</div><div class=\"line\">“*来限制用户只能输入出现在许可属性值中的字符</div><div class=\"line\">*如果＜input＞元素也有一个\"data-messageid\"属性，</div><div class=\"line\">*那么认为这个值是另一个文档元素的id</div><div class=\"line\">*如果用户输入了不允许的字符，那么会显示消息元素</div><div class=\"line\">*如果用户输入了允许的字符，那么会隐藏消息元素</div><div class=\"line\">*这个信息id元素用于向用户说明拒绝输入的原因</div><div class=\"line\">*它通常应该由CSS控制样式，所以它开始不可见</div><div class=\"line\">*</div><div class=\"line\">*下面是使用这个模块的HTML代码示例</div><div class=\"line\">*邮政编码：＜input id=\"zip\"type=\"text\"</div><div class=\"line\">*data-allowed-chars=\"0123456789\"data-messageid=\"zipwarn\"＞</div><div class=\"line\">*＜span id=\"zipwarn\"style=\"color:red;visibility:hidden\"＞只支持数字＜/span＞</div><div class=\"line\">*</div><div class=\"line\">*这个模块相当地不唐突，它没有定义全局命名空间中的任何符号</div><div class=\"line\">*/</div><div class=\"line\">whenReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//当文档加载完毕时，运行这个函数</span></div><div class=\"line\">    <span class=\"comment\">//查找所有＜input＞元素</span></div><div class=\"line\">    <span class=\"keyword\">var</span> inputelts = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"input\"</span>); <span class=\"comment\">//遍历它们</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i＜ inputelts.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> elt = inputelts[i]; <span class=\"comment\">//跳过不是文本域或没有data-allowed-chars属性的元素</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (elt.type != <span class=\"string\">\"text\"</span> || !elt.getAttribute(<span class=\"string\">\"data-allowed-chars\"</span>))</div><div class=\"line\">            <span class=\"keyword\">continue</span>; </div><div class=\"line\">        <span class=\"comment\">//在input元素上注册事件处理程序函数</span></div><div class=\"line\">        <span class=\"comment\">//传统的keypress事件处理程序能够在任何地方运行</span></div><div class=\"line\">        <span class=\"comment\">//textInput（混合大小写）在2010年后Safari和Chrome支持</span></div><div class=\"line\">        <span class=\"comment\">//textinput（小写）是3级DOM事件规范草案中的版本</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (elt.addEventListener) &#123;</div><div class=\"line\">            elt.addEventListener(<span class=\"string\">\"keypress\"</span>, filter, <span class=\"literal\">false</span>);</div><div class=\"line\">            elt.addEventListener(<span class=\"string\">\"textInput\"</span>, filter, <span class=\"literal\">false</span>);</div><div class=\"line\">            elt.addEventListener(<span class=\"string\">\"textinput\"</span>, filter, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//不支持addEventListener()的IE也不会支持textinput</span></div><div class=\"line\">            elt.attachEvent(<span class=\"string\">\"onkeypress\"</span>, filter);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//这是用于过滤用户输入的keypress、textInput和textinput事件处理程序</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\">event</span>) </span>&#123; <span class=\"comment\">//获取事件对象和目标元素对象</span></div><div class=\"line\">        <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event; <span class=\"comment\">//标准或IE模型</span></div><div class=\"line\">        <span class=\"keyword\">var</span> target = e.target || e.srcElement; <span class=\"comment\">//标准或IE模型</span></div><div class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"literal\">null</span>; <span class=\"comment\">//输入的文本</span></div><div class=\"line\">        <span class=\"comment\">//获取输入的字符或文本</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (e.type === <span class=\"string\">\"textinput\"</span> || e.type === <span class=\"string\">\"textInput\"</span>) text = e.data;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//这是传统的keypress事件</span></div><div class=\"line\">            <span class=\"comment\">//对于可打印键的keypress事件，Firefox使用charCode</span></div><div class=\"line\">            <span class=\"keyword\">var</span> code = e.charCode || e.keyCode; <span class=\"comment\">//如果按下的是任何形式的功能键，不要过滤它</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (code＜ <span class=\"number\">32</span> || <span class=\"comment\">//ASCII控制字符</span></div><div class=\"line\">                e.charCode == <span class=\"number\">0</span> || <span class=\"comment\">//功能键（仅指Firefox）</span></div><div class=\"line\">                e.ctrlKey || e.altKey) <span class=\"comment\">//按下辅助键</span></div><div class=\"line\">                <span class=\"keyword\">return</span>; <span class=\"comment\">//不过滤这个事件</span></div><div class=\"line\">            <span class=\"comment\">//把字符编码转化为字符串</span></div><div class=\"line\">            <span class=\"keyword\">var</span> text = <span class=\"built_in\">String</span>.fromCharCode(code);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//现在需要从input元素中寻找所需信息</span></div><div class=\"line\">        <span class=\"keyword\">var</span> allowed = target.getAttribute(<span class=\"string\">\"data-allowed-chars\"</span>); <span class=\"comment\">//合法字符</span></div><div class=\"line\">        <span class=\"keyword\">var</span> messageid = target.getAttribute(<span class=\"string\">\"data-messageid\"</span>); <span class=\"comment\">//信息元素id</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (messageid) <span class=\"comment\">//如果存在消息元素id，那么获取这个元素</span></div><div class=\"line\">            <span class=\"keyword\">var</span> messageElement = <span class=\"built_in\">document</span>.getElementById(messageid); <span class=\"comment\">//遍历输入文本中的字符</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i＜ text.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> c = text.charAt(i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (allowed.indexOf(c) == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">//这是不允许的字符吗？</span></div><div class=\"line\">                <span class=\"comment\">//如果存在不合法字符，显示消息元素</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (messageElement) messageElement.style.visibility = <span class=\"string\">\"visible\"</span>; <span class=\"comment\">//取消默认行为，所有不会插入文本</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (e.preventDefault) e.preventDefault();</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.returnValue) e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果所有的字符都合法，隐藏存在的消息元素</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (messageElement) messageElement.style.visibility = <span class=\"string\">\"hidden\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>keypress和textinput事件是在新输入的文本真正插入到聚焦的文档元素前触发，所以这些事件处理程序能够取消事件和组织文本插入。</p>\n<ul>\n<li><p>浏览器也实现了在文本插入到元素后才触发的input事件类型<em>input</em>。虽然这些事件不能取消，不能指定事件对象中的最新文本，但它们能以某种形式提供元素文本内容发生改变的通知。例如，想确保输入框中输入的任何文本都是大写的，可以，例1-2：<code>姓氏：＜input type=&quot;text&quot;oninput=&quot;this.value=this.value.toUpperCase();&quot;＞</code></p>\n<ul>\n<li><p>html5标准化了input，除IE外的浏览器都支持它。在IE中，可以使用不标准的<em>propertychange</em>事件检测文本输入元素的value属性改变来实现相似的效果。</p>\n<p>使用propertychange事件探测文本输入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forceToUpperCase</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> element === <span class=\"string\">\"string\"</span>) element = <span class=\"built_in\">document</span>.getElementById(element);</div><div class=\"line\">    element.oninput = upcase;</div><div class=\"line\">    element.onpropertychange = upcaseOnPropertyChange; <span class=\"comment\">//简易案例：用于input事件的处理程序</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upcase</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.value.toUpperCase();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//疑难案例：用于propertychange事件的处理程序</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upcaseOnPropertyChange</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;                  <span class=\"comment\">//如果value属性发生改变</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (e.propertyName === <span class=\"string\">\"value\"</span>) &#123;               <span class=\"comment\">//移除onpropertychange处理程序，避免循环调用</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.onpropertychange = <span class=\"literal\">null</span>;               <span class=\"comment\">//把值都变成大写</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.value.toUpperCase();      <span class=\"comment\">//然后恢复原来的propertychange处理程序</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.onpropertychange = upcaseOnPropertyChange;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考资料：</p>\n<p>《JavaScript权威指南》第六版 p670</p>\n<p><a href=\"http://www.quirksmode.org/dom/events/keys.html\" target=\"_blank\" rel=\"external\">keydown, keypress, keyup</a></p>\n<p><a href=\"http://www.cnblogs.com/owenChen/p/3215421.html\" target=\"_blank\" rel=\"external\">使用中文输入法时对键盘事件的处理</a></p>\n</blockquote>\n"},{"title":"JavaScript字符串操作","url":"http://www.maotingfeng.me/2017/01/12/JavaScript字符串操作/","content":"<h2 id=\"JavaScript字符串操作\"><a href=\"#JavaScript字符串操作\" class=\"headerlink\" title=\"JavaScript字符串操作\"></a>JavaScript字符串操作</h2><p>属性</p>\n<ul>\n<li><em>length</em>返回字符串中的字符数</li>\n</ul>\n<p>方法</p>\n<ul>\n<li><p>charAt()*取出一个字符串中指定位置的字符</p>\n</li>\n<li><p><em>charCodeAt()</em>返回一个字符串中指定位置的字符的编码</p>\n</li>\n<li><p><em>concat()</em>将一个或多个值连接成一个字符串</p>\n</li>\n<li><p><em>indexOf()</em>和<em>lastIndexOf()</em>在指定的字符串中寻找一个字符或者子串，返回其索引值</p>\n</li>\n<li><p><em>localeCompare()</em>使用本地定义的顺序比较字符串</p>\n</li>\n<li><p><em>match()</em>使用正则表达式执行查找和替换操作</p>\n</li>\n<li><p><em>replace()</em>使用正则表达式执行查找和替换操作</p>\n</li>\n<li><p><em>search()</em>在一个字符串中查找匹配某个正则表达式的子串</p>\n</li>\n<li><p><em>split()</em>在指定的分隔字符串或者正则表达式处断开，将一个字符串分割为由字符串组成的数组</p>\n</li>\n<li><p><del><em>substr()</em>提取字符串的一个子串</del>，这个方法不再是ECMAScript的标准，因此已弃用。</p>\n<ul>\n<li><p>string.substr(start,length) </p>\n<p>start表示子串的开始位置，如果是负数，则表示从尾部开始计算，-1表示最后一个字符，-2表示倒数第二个字符。</p>\n<p>length表示该子串中的字符数，如果省略，则子串会包含从开始位置到字符串结束的所有字符。</p>\n</li>\n<li><p>在IE中传入负的start不会正常工作，它们不是从string的尾部开始计算字符位置，而是从位置0开始</p>\n</li>\n</ul>\n</li>\n<li><p><em>slice()</em>返回字符串的一个切片或子串</p>\n<ul>\n<li>string.slice( start , end )<ul>\n<li>start切片开始的字符串索引，如果为负数，则从字符串的尾部开始计算。-1表示最后一个字符，-2表示倒数第二个字符，以此类推。</li>\n<li>end紧跟着切片结尾的字符串索引(不包含end位置)，如果为负数，则从字符串的尾部开始计算。如果不指定，则切片将包括从start到当前字符串结尾的所有字符。</li>\n<li>IE4中start为负数将出现错误（后续版本无这个问题），它从0的位置开始计算。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><em>substring()</em>返回字符串的一个子串。</p>\n<ul>\n<li><p>string.substring( from , to )</p>\n<ul>\n<li>from，一个非负整数，表示要提取的子串的第一个字符在string中的位置。</li>\n<li>to，一个非负整数，要提取子串的最后一个字符的位置大1，如果省略，则返回的子串将持续到string的结尾。</li>\n<li>返回子串长度总是等于to - from 。</li>\n<li>如果from等于to，则返回一个空字符串，长度为0。</li>\n<li>如果from比to大，这个方法将先交换两个参数的值，然后返回它们之间的子串。</li>\n<li>String.slice()和非标准的String.substr()也能从字符串中提取子串，但是和它们不同的是，String.substring()不接受负参数。</li>\n</ul>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>静态方法</p>\n<ul>\n<li><em>String.fromCharCode()</em>使用字符编码创建一个新的字符串</li>\n</ul>\n<blockquote>\n<p>参考资料：《JavaScript权威指南》第六版 p1034</p>\n</blockquote>\n"},{"title":"JavaScript数组操作","url":"http://www.maotingfeng.me/2017/01/12/JavaScript数组操作/","content":"<h2 id=\"JavaScript数组操作\"><a href=\"#JavaScript数组操作\" class=\"headerlink\" title=\"JavaScript数组操作\"></a>JavaScript数组操作</h2><ul>\n<li><p><em>join()</em> 方法将数组中所有的元素都转化为字符串并连接在一起，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中来分隔数组的各个元素，<strong>如果不指定分隔符，默认使用英文逗号</strong>。一般配合String.split()方法的操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span>, <span class=\"number\">3</span> ] ;</div><div class=\"line\">a.join() ;\t<span class=\"comment\">// \"1,2,3\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><em>reverse()</em>方法将数组中的元素颠倒排序，返回逆序的数组，不创建新数组，在原有的数组上逆序。</p>\n</li>\n<li><p><em>sort()</em>方法将数组的元素排序，并返回排序后的数组，不创建新数组，在原有的数组上排序。当不带参数调用sort()时，数组元素以<strong>字母顺序排序</strong>，如果数组包含undefined元素，它们会被排到数组的尾部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">33</span> , <span class=\"number\">4</span> , <span class=\"number\">1111</span> , <span class=\"number\">222</span> ] ;</div><div class=\"line\">a.sort( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123; <span class=\"keyword\">return</span> a - b ; &#125; )\t<span class=\"comment\">// a = [4, 33, 222, 1111]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><em>concat()</em>方法创建并返回一个新数组，它的元素包括调用concat()的原始数组的元素和concat()的每个参数。如果这些参数中的任何一个自身是数组，则连接的是数组的元素，而不是数组本身。但要注意，concat()不会递归扁平化的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> ] ;</div><div class=\"line\">a.concat( <span class=\"number\">4</span> , <span class=\"number\">5</span> ) ; \t<span class=\"comment\">// [ 1 , 2 , 3 , 4 ,5 ]</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> ,<span class=\"number\">3</span> ] ;</div><div class=\"line\">b.concat( [ <span class=\"number\">4</span> , <span class=\"number\">5</span> ] ) ; <span class=\"comment\">// [ 1 , 2 , 3 , 4 , 5]</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> ]</div><div class=\"line\">c.concat( [ <span class=\"number\">4</span> , [ <span class=\"number\">5</span> ] ] ) ;\t<span class=\"comment\">// [ 1 , 2 , 3 , 4 , [ 5 ] ]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><em>slice()</em>方法返回指定数组的一个片段或址数组，返回新数组。它的两个参数分别指定了片段的开始和结束位置。返回的数组包含第一个参数指定的位置和到第二个参数（不包含第二个参数）指定的位置之间的数组元素。</p>\n<ul>\n<li>如果指定一个参数，返回的数组包含从开始位置到数组结尾的所有元素。</li>\n<li>如果参数中出现负数，它表示相对于数组中最后一个元素的位置。-1指定了最后一个元素，-3倒数第三个元素。</li>\n<li>如果不指定开始位置，默认从0开始</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> ] ;</div><div class=\"line\">a.slice( <span class=\"number\">0</span> , <span class=\"number\">3</span> ) ; \t<span class=\"comment\">// [ 1 , 2 , 3 ]</span></div><div class=\"line\">a.slice( <span class=\"number\">-3</span> , <span class=\"number\">-2</span> ) ; <span class=\"comment\">// [ 3 ]</span></div><div class=\"line\">a.slice() \t\t\t<span class=\"comment\">// [ 1 , 2 , 3 , 4 , 5 ]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><em>splice()</em>方法在数组中插入或删除元素的通用方法，原有的数组相应的被修改，返回被删除元素的新数组。</p>\n<ul>\n<li><p>第一个参数指定了插入（或删除）的起始位置，第二个参数指定了应该从数组中删除的元素的个数。如果省略第二个参数，从起始到数组结尾的所有元素都将被删除。如果没有被删除的元素，就返回空数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> , <span class=\"number\">6</span> , <span class=\"number\">7</span> , <span class=\"number\">8</span> ];</div><div class=\"line\">a.splice( <span class=\"number\">4</span> ) ;\t<span class=\"comment\">// 返回[ 5 , 6 , 7 , 8 ];a是[ 1 , 2 , 3 , 4 ]</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> , <span class=\"number\">6</span> , <span class=\"number\">7</span> , <span class=\"number\">8</span> ];</div><div class=\"line\">b.splice( <span class=\"number\">4</span> , <span class=\"number\">2</span> ) ;\t<span class=\"comment\">// 返回[ 5 , 6 ];b是[ 1 , 2 , 3 , 4 , 7 , 8 ]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>前两个参数指定了需要删除的数组元素，后面的任意个参数指定了需要插入到数组中的元素，从第一个参数指定的位置开始插入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> ] ;</div><div class=\"line\">a.splice( <span class=\"number\">2</span> , <span class=\"number\">2</span> , <span class=\"string\">'a'</span> , <span class=\"string\">'b'</span> , [ <span class=\"string\">'c'</span> ] ) ; <span class=\"comment\">// [ 1 , 2 , 'a' , 'b' , [ 'c' ] , 5 ]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><em>push()</em>和<em>pop()</em>方法允许将数组当作栈来使用，都是修改原有的数组。</p>\n<ul>\n<li>push()方法，在数组的尾部添加一个或多个元素，并且返回数组的新长度。</li>\n<li>pop()方法相反，它删除数组的最后一个元素，并且返回它删除的值。</li>\n</ul>\n</li>\n<li><p><em>unshift()</em>和shift()方法，在数组的头部进行元素的插入和删除操作。</p>\n<ul>\n<li>unshift()在数组的头部添加一个或多个元素，返回数组的新长度。多个参数时，插入的元素顺序和参数顺序一致。</li>\n<li>shift()删除数组的第一个元素并且将其返回。</li>\n</ul>\n</li>\n<li><p><em>toString()</em>和<em>toLocaleString()</em>方法，将数组的每个元素转化为字符串（如有必要，将调用元素的toString()方法），并且输出用逗号分隔的字符串列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> ].toString() <span class=\"comment\">// \"1,2,3\"</span></div><div class=\"line\">[ <span class=\"string\">'a'</span> , <span class=\"string\">'b'</span> , <span class=\"string\">'c'</span> ].toString() <span class=\"comment\">// \"a,b,c\"</span></div><div class=\"line\">[ <span class=\"number\">1</span> , [ <span class=\"number\">2</span> , <span class=\"string\">'c'</span> ] ].toString() <span class=\"comment\">// \"1,2,c\"</span></div><div class=\"line\"><span class=\"comment\">// 这里和不使用参数的join()方法返回的字符串一致</span></div></pre></td></tr></table></figure>\n<ul>\n<li>toLocaleString()是toString()方法的本地化版本，它调用元素的toLocaleString()方法将每个数组元素转化为字符串，使用本地化的（或者自定义实现的）分隔符将这些字符串连接起来生成最终的字符串。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 不同的区域设置和语言设置，执行的输出结果可能不同。</span></div><div class=\"line\">[ <span class=\"number\">1</span> , [ <span class=\"number\">2</span> , <span class=\"string\">'c'</span> ] ].toLocaleString() <span class=\"comment\">// \"1,2,c\"</span></div><div class=\"line\">[ <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() ].toLocaleString()\t\t <span class=\"comment\">// \"2017/1/11 上午10:31:37\"</span></div><div class=\"line\">[ <span class=\"number\">15.26440</span> ].toLocaleString()\t\t <span class=\"comment\">// \"15.264\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"ECMAScript5中数组的方法\"><a href=\"#ECMAScript5中数组的方法\" class=\"headerlink\" title=\"ECMAScript5中数组的方法\"></a>ECMAScript5中数组的方法</h4><ul>\n<li><p><em>forEach()</em>方法从头至尾遍历数组，为每个元素调用指定的函数。</p>\n</li>\n<li><p><em>map()</em>方法将调用的每个元素传递给指定的函数，并且返回一个数组，它包含该函数的返回值。</p>\n</li>\n<li><p><em>filter()</em>方法返回的数组元素是调用的数组的一个子集，filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的。</p>\n</li>\n<li><p><em>every()</em>和<em>some()</em>方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true和false。</p>\n<ul>\n<li><p>every()方法针对所有元素调用判定函数，都返回true时，它才返回true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> ] ;</div><div class=\"line\">a.every( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> x &lt; <span class=\"number\">10</span> ; &#125; )\t<span class=\"comment\">// true</span></div><div class=\"line\">a.every( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span> ; &#125; )\t<span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>some()方法当数组中至少有一个元素调用判定函数返回true时，它就返回true；否则返回false。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> ] ;</div><div class=\"line\">a.some( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span> ; &#125; )\t<span class=\"comment\">// true</span></div><div class=\"line\">a.some( <span class=\"built_in\">isNaN</span> )\t\t\t\t\t\t\t\t\t<span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在空数组上调用时，every()返回true，some()返回false。</p>\n</li>\n<li><p>every()判定函数第一次返回false时，会立即终止遍历，返回false；some()判定函数第一次返回true，会立即终止遍历，返回true。</p>\n</li>\n</ul>\n</li>\n<li><p><em>reduce()</em>和<em>reduceRight()</em>方法使用指定的函数将数组进行组合。</p>\n</li>\n<li><p><em>indexOf()</em>和<em>lastIndexOf()</em>搜索整个数组中具体给定值的元素，返回找到的第一个元素的索引，如果没有找到，就返回-1。</p>\n<ul>\n<li>indexOf()从头至尾搜索，而lastIndexOf()则反向搜索。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"js获取绑定到某元素上的事件","url":"http://www.maotingfeng.me/2017/01/09/js获取绑定到某元素上的事件/","content":"<h2 id=\"js获取绑定到某元素上的事件\"><a href=\"#js获取绑定到某元素上的事件\" class=\"headerlink\" title=\"js获取绑定到某元素上的事件\"></a>js获取绑定到某元素上的事件</h2><p>1、如果绑定在了元素的事件属性上，则可以获取到。</p>\n<p>例1-1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>) ;</div><div class=\"line\"><span class=\"comment\">// 绑定</span></div><div class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log( <span class=\"string\">'点击了div'</span> ); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取绑定</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>).onclick ) ;</div><div class=\"line\"><span class=\"comment\">// 打印出： function () &#123; console.log('点击了div'); &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果未定义onclick的属性事件，则打印出：null</span></div></pre></td></tr></table></figure>\n<p>2、如果是用<code>addEventListener</code>绑定的事件，则是获取不了已经绑定的事件的。</p>\n<p>​    - 不过chrome的控制台可以拿到</p>\n<p>​    <code>getEventListeners( ele )</code>可以返回ele元素已绑定事件的对象列表。仅限调试模式的console里面使用，代码里跑是不行的。所以对开发并没有什么帮助。</p>\n<p>​    - 控制面板的<code>Elements</code>面板右侧的<code>Event Listeners</code>子面板里面有选中元素的已绑定的事件列表。</p>\n<p>​    - 之前DOM 3事件模型上有个提案，建议在元素上添加一个<code>eventListenerList</code>属性来保存已经绑定过的事件，但是貌似没有通过。所以<code>addEventListener</code>绑定的事件，想要获取已经绑定的事件处理器，是没有任何直接的机制获取的。</p>\n<p>3、如果实在想知道某个元素绑定过哪些事件，只能自己实现一个类似的精简版的缓存机制了。绑定过的标记一下，存在全局变量里，存在对应的元素上等等。对应于某些具体场景，可以先<code>removeEventListener</code>然后<code>addEventListener</code>，不过局限性很大。</p>\n<p>4、常用类库一般都封装了常用的事件操作，绑定，解绑之类的；一般都会缓存已经绑定的事件，所以从它里面可以拿到某个元素已经绑定的事件。</p>\n<p>比如jquery</p>\n<p>例1-2:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> clickEvents = $( ele ).data(<span class=\"string\">\"events\"</span>).click;</div><div class=\"line\">jQuery.each(clickEvents, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, handlerObj</span>) </span>&#123;</div><div class=\"line\">    alert(handlerObj.handler) <span class=\"comment\">// alerts \"function() &#123; alert('clicked!') &#125;\"</span></div><div class=\"line\">    <span class=\"comment\">// also available: handlerObj.type, handlerObj.namespace</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>5、开发模式的调试阶段，你可以试试：<a href=\"http://www.sprymedia.co.uk/article/Visual+Event+2\" target=\"_blank\" rel=\"external\">visual event</a></p>\n<p>中文简介：<a href=\"http://web.jobbole.com/82503/\" target=\"_blank\" rel=\"external\">《Visual Event ：快速查看 DOM 上绑定的 JS 事件》</a></p>\n<blockquote>\n<p>参考资料🔗</p>\n<p>1、<a href=\"http://stackoverflow.com/questions/446892/how-to-find-event-listeners-on-a-dom-node-when-debugging-or-from-the-javascript\" target=\"_blank\" rel=\"external\">How to find event listeners on a DOM node when debugging or from the JavaScript code?</a></p>\n<p>2、<a href=\"https://segmentfault.com/q/1010000006829568\" target=\"_blank\" rel=\"external\">js 有没有办法 判断一个dom元素是否已经绑定了某个事件？？</a></p>\n</blockquote>\n"},{"title":"js日期对象的小技巧","url":"http://www.maotingfeng.me/2017/01/05/js日期对象的小技巧/","content":"<h3 id=\"js日期对象的小技巧\"><a href=\"#js日期对象的小技巧\" class=\"headerlink\" title=\"js日期对象的小技巧\"></a>js日期对象的小技巧</h3><ol>\n<li><p>获取每个月有多少天</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> days_per_month = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"number\">0</span> ) ; \t<span class=\"comment\">// 最后一位等于0即可</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>每月的第一天是周几</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> day_of_month = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"number\">1</span>).getDay() ;\t<span class=\"comment\">// 就是普通获取星期数</span></div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"js常用工具函数","url":"http://www.maotingfeng.me/2017/01/03/js常用工具函数/","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 常用正则校验</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrjia = &#123;</div><div class=\"line\">    check: &#123;</div><div class=\"line\">        isPhone: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> ua = navigator.userAgent.toLowerCase(),</div><div class=\"line\">                reg = <span class=\"regexp\">/iPhone|iPad|Android|ucweb|windows\\s+mobile|Windows\\s+Phone/i</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> reg.test(ua)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isIE6: <span class=\"built_in\">window</span>.VBArray &amp;&amp; !<span class=\"built_in\">window</span>.XMLHttpRequest,</div><div class=\"line\">        isNick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> nickReg = <span class=\"regexp\">/^[\\u4e00-\\u9fa5A-Za-z0-9-_]+$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> nickReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isEmail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> emailReg = <span class=\"regexp\">/^[a-z0-9][\\w\\.]*@([a-z0-9][a-z0-9-]*\\.)+[a-z]&#123;2,5&#125;$/i</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> emailReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isMobile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> mobileReg = <span class=\"regexp\">/^1[345678][0-9]&#123;9&#125;$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> mobileReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isTelephone: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> phoneReg = <span class=\"regexp\">/^0\\d&#123;2,3&#125;-\\d&#123;5,9&#125;$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> phoneReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isUrl: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> urlReg = <span class=\"regexp\">/^http:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w-.\\/?%&amp;=]*)?$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> urlReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> numReg = <span class=\"regexp\">/^[0-9]\\d*$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> numReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isFloatNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> floatReg = <span class=\"regexp\">/^(-?\\d+)(\\.\\d+)?$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> floatReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isDate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> dateReg = <span class=\"regexp\">/^((((1[6-9]|[2-9]\\d)\\d&#123;2&#125;)-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d&#123;2&#125;)-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d&#123;2&#125;)-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$/</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> dateReg.test(str)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        isAnimate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">style</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> prefix = [<span class=\"string\">\"webkit\"</span>, <span class=\"string\">\"Moz\"</span>, <span class=\"string\">\"ms\"</span>, <span class=\"string\">\"o\"</span>],</div><div class=\"line\">                i, humpString = [],</div><div class=\"line\">                htmlStyle = <span class=\"built_in\">document</span>.documentElement.style,</div><div class=\"line\">                _toHumb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> string.replace(<span class=\"regexp\">/-(\\w)/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$0, $1</span>) </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> $<span class=\"number\">1.</span>toUpperCase()</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;;</div><div class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> prefix) &#123;</div><div class=\"line\">                humpString.push(_toHumb(prefix[i] + <span class=\"string\">\"-\"</span> + style))</div><div class=\"line\">            &#125;</div><div class=\"line\">            humpString.push(_toHumb(style));</div><div class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> humpString) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (humpString[i] <span class=\"keyword\">in</span> htmlStyle) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 工具类</span></div><div class=\"line\">    tools: &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取url的参数</span></div><div class=\"line\">        getUrlParams: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> url = location.href,</div><div class=\"line\">                value = <span class=\"literal\">null</span>,</div><div class=\"line\">                index = url.indexOf(<span class=\"string\">\"?\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>( name )&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span> ;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> &#123;&#125; ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> paramstr = url.substring(index + <span class=\"number\">1</span>),</div><div class=\"line\">                    obj = &#123;&#125;,</div><div class=\"line\">                    arrParams = paramstr.split(<span class=\"string\">\"&amp;\"</span>);</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arrParams.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> tmp = arrParams[i].split(<span class=\"string\">\"=\"</span>);</div><div class=\"line\">                    obj[tmp[<span class=\"number\">0</span>]] = tmp[<span class=\"number\">1</span>] ? <span class=\"built_in\">decodeURIComponent</span>( tmp[<span class=\"number\">1</span>] ) : <span class=\"literal\">undefined</span> ;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> obj[name]</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> obj</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; ,</div><div class=\"line\">        <span class=\"comment\">// 获取url的节点部分  http://www.hrjia.com/hr/resume/HR1028131626713</span></div><div class=\"line\">        <span class=\"comment\">// 执行之后返回 [\"www.hrjia.com\", \"hr\", \"resume\", \"HR1028131626713\"]</span></div><div class=\"line\">        getUrlTree: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> urlNode = location.href.replace(<span class=\"regexp\">/http:\\/\\//i</span>, <span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/\\?.*/i</span>, <span class=\"string\">\"\"</span>).split(<span class=\"string\">\"/\"</span>),</div><div class=\"line\">                length = urlNode.length;</div><div class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> urlNode</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> index &lt; <span class=\"number\">0</span> ? urlNode[length + index] : urlNode[index]</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">  \t<span class=\"comment\">// 前缀补齐   function addZero(str,length)&#123;return new Array(length - str.length + 1).join(\"0\") + str;&#125;</span></div><div class=\"line\">    pad:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num, n</span>) </span>&#123;  </div><div class=\"line\">      <span class=\"keyword\">var</span> len = num.toString().length;  </div><div class=\"line\">      <span class=\"keyword\">while</span>(len &lt; n) &#123;  </div><div class=\"line\">          num = <span class=\"string\">\"0\"</span> + num;  </div><div class=\"line\">          len++;  </div><div class=\"line\">      &#125;  </div><div class=\"line\">      <span class=\"keyword\">return</span> num;  </div><div class=\"line\">  &#125; ,</div><div class=\"line\">    padNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num, fill</span>) </span>&#123;  <span class=\"comment\">/* 字符自动补全 */</span></div><div class=\"line\">      <span class=\"comment\">//改自：http://segmentfault.com/q/1010000002607221</span></div><div class=\"line\">      <span class=\"keyword\">var</span> len = (<span class=\"string\">''</span> + num).length;</div><div class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"built_in\">Array</span>(</div><div class=\"line\">      fill &gt; len ? fill - len + <span class=\"number\">1</span> || <span class=\"number\">0</span> : <span class=\"number\">0</span></div><div class=\"line\">      ).join(<span class=\"number\">0</span>) + num);</div><div class=\"line\">    &#125; ,</div><div class=\"line\">  \t<span class=\"comment\">/* uuid生成器 */</span></div><div class=\"line\">    UUID: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">      <span class=\"keyword\">var</span> uuid = <span class=\"string\">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class=\"regexp\">/[xy]/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> r = (d + <span class=\"built_in\">Math</span>.random()*<span class=\"number\">16</span>)%<span class=\"number\">16</span> | <span class=\"number\">0</span>;</div><div class=\"line\">        d = <span class=\"built_in\">Math</span>.floor(d/<span class=\"number\">16</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> (c==<span class=\"string\">'x'</span> ? r : (r&amp;<span class=\"number\">0x7</span>|<span class=\"number\">0x8</span>)).toString(<span class=\"number\">16</span>);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> uuid;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">/* 判断是否是有效的日期对象 */</span></div><div class=\"line\">    isDateObj: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;.toString.call(o) === <span class=\"string\">\"[object Date]\"</span> &amp;&amp; o.toString() !== <span class=\"string\">'Invalid Date'</span> &amp;&amp; !<span class=\"built_in\">isNaN</span>(o);</div><div class=\"line\">    &#125; ,</div><div class=\"line\">  <span class=\"comment\">/* 校验日期格式 */</span></div><div class=\"line\">  checkDate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> date </span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* 年月日 格式yyyy-MM-dd或yyyy-M-d -/.分割 */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> dateReg = <span class=\"regexp\">/^(?:(?!0000)[0-9]&#123;4&#125;([-/.]?)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\\2(?:29))$/</span>;</div><div class=\"line\">    <span class=\"comment\">/* 年月日 格式yyyy-MM-dd HH:mm:ss -/.分割 */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> dateTimeReg = <span class=\"regexp\">/^(?:(?!0000)[0-9]&#123;4&#125;([-/.]?)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\\2(?:29))\\s+([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>( date.indexOf(<span class=\"string\">':'</span>) &lt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> dateReg.test( date ) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> dateTimeReg.test( date ) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"react学习两张图","url":"http://www.maotingfeng.me/2017/01/03/react学习两张图/","content":"<h3 id=\"React学习两张图\"><a href=\"#React学习两张图\" class=\"headerlink\" title=\"React学习两张图\"></a>React学习两张图</h3><p><img src=\"http://oco9w3mgp.bkt.clouddn.com/react-lifyCycle.png\" alt=\"react-lifecycle\"></p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/react-lifyCycle2.png\" alt=\"react-lifycycle2\"></p>\n<p>1、<a href=\"https://segmentfault.com/a/1190000003691119\" target=\"_blank\" rel=\"external\">react生命周期React Component Lifecycle(segmentfault)</a></p>\n<p>2、<a href=\"http://www.oschina.net/translate/performance-engineering-with-react\" target=\"_blank\" rel=\"external\">React 的性能工程 Performance Engineering with React 翻译</a></p>\n"},{"title":"光标对象操作的方法整理","url":"http://www.maotingfeng.me/2017/01/03/光标对象操作的方法整理/","content":"<h3 id=\"光标对象操作的方法整理\"><a href=\"#光标对象操作的方法整理\" class=\"headerlink\" title=\"光标对象操作的方法整理\"></a>光标对象操作的方法整理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _Range = &#123;</div><div class=\"line\">    getRange: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> sel ;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.getSelection) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span> ;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sel = <span class=\"built_in\">window</span>.getSelection();</div><div class=\"line\">        <span class=\"keyword\">if</span> (sel.rangeCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sel.getRangeAt(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span> ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">//获取光标位置函数 不适合contenteditable元素，适用input</span></div><div class=\"line\">    getCursortPosition: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctrl</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> CaretPos = <span class=\"number\">0</span>;                                                   <span class=\"comment\">// IE Support</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.selection) &#123;</div><div class=\"line\">            ctrl.focus ();</div><div class=\"line\">            <span class=\"keyword\">var</span> Sel = <span class=\"built_in\">document</span>.selection.createRange ();</div><div class=\"line\">            Sel.moveStart (<span class=\"string\">'character'</span>, -ctrl.value.length);</div><div class=\"line\">            CaretPos = Sel.text.length;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctrl.selectionStart || ctrl.selectionStart == <span class=\"string\">'0'</span>)        <span class=\"comment\">// Firefox support</span></div><div class=\"line\">            CaretPos = ctrl.selectionStart ;</div><div class=\"line\">        <span class=\"keyword\">return</span> (CaretPos);</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 设置光标位置函数 不适合contenteditable元素，适合input</span></div><div class=\"line\">    setInputCaretPosition(ctrl, pos)&#123;</div><div class=\"line\">        <span class=\"keyword\">debugger</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(ctrl.setSelectionRange) &#123;</div><div class=\"line\">            ctrl.focus();</div><div class=\"line\">            ctrl.setSelectionRange( pos , pos ) ;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctrl.createTextRange) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> range = ctrl.createTextRange();</div><div class=\"line\">            range.collapse(<span class=\"literal\">true</span>);</div><div class=\"line\">            range.moveEnd(<span class=\"string\">'character'</span>, pos);</div><div class=\"line\">            range.moveStart(<span class=\"string\">'character'</span>, pos);</div><div class=\"line\">            range.select();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 光标的位置,光标的字符偏移量 适合contenteditable元素，不适合input</span></div><div class=\"line\">    getCaretCharacterOffsetWithin: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element , current_range </span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> caretOffset = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> doc = element.ownerDocument || element.document;</div><div class=\"line\">        <span class=\"keyword\">var</span> win = doc.defaultView || doc.parentWindow;</div><div class=\"line\">        <span class=\"keyword\">var</span> sel;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> win.getSelection != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">            sel = win.getSelection();</div><div class=\"line\">            <span class=\"keyword\">if</span> (sel.rangeCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> range = current_range ? current_range : win.getSelection().getRangeAt(<span class=\"number\">0</span>) ;</div><div class=\"line\">                <span class=\"keyword\">var</span> preCaretRange = range.cloneRange();</div><div class=\"line\">                preCaretRange.selectNodeContents(element);</div><div class=\"line\">                preCaretRange.setEnd(range.endContainer, range.endOffset);</div><div class=\"line\">                caretOffset = preCaretRange.toString().length;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((sel = doc.selection) &amp;&amp; sel.type != <span class=\"string\">\"Control\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> textRange = sel.createRange();</div><div class=\"line\">            <span class=\"keyword\">var</span> preCaretTextRange = doc.body.createTextRange();</div><div class=\"line\">            preCaretTextRange.moveToElementText(element);</div><div class=\"line\">            preCaretTextRange.setEndPoint(<span class=\"string\">\"EndToEnd\"</span>, textRange);</div><div class=\"line\">            caretOffset = preCaretTextRange.text.length;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> caretOffset;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 设置光标位置函数  适合contenteditable元素 , 不适合input</span></div><div class=\"line\">    setCaretPosition: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> node , textNode , caret </span>)</span>&#123;</div><div class=\"line\">        node.focus();</div><div class=\"line\">        <span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange();</div><div class=\"line\"></div><div class=\"line\">        range.setStart(textNode, caret);</div><div class=\"line\">        range.setEnd(textNode, caret);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> sel = <span class=\"built_in\">window</span>.getSelection();</div><div class=\"line\">        sel.removeAllRanges();</div><div class=\"line\">        sel.addRange(range);</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 光标的像素位置  适合contenteditable元素 , 不适合input</span></div><div class=\"line\">    getCursorOffset: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;    <span class=\"comment\">// 也可以直接，range.getBoundingClientRect()  不过我遇到过bug,推荐这个方法。</span></div><div class=\"line\">        <span class=\"keyword\">var</span> clonedRange, offset, range, rect, shadowCaret;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.getSelection &amp;&amp; (range = <span class=\"keyword\">this</span>.getRange())) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (range.endOffset - <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> &amp;&amp; range.endContainer !== <span class=\"keyword\">this</span>.domInputor) &#123;</div><div class=\"line\">                clonedRange = range.cloneRange();</div><div class=\"line\">                clonedRange.setStart(range.endContainer, range.endOffset - <span class=\"number\">1</span>);</div><div class=\"line\">                clonedRange.setEnd(range.endContainer, range.endOffset);</div><div class=\"line\">                rect = clonedRange.getBoundingClientRect();</div><div class=\"line\">                offset = &#123;</div><div class=\"line\">                    height: rect.height,</div><div class=\"line\">                    left: rect.left + rect.width,</div><div class=\"line\">                    top: rect.top</div><div class=\"line\">                &#125;;</div><div class=\"line\">                clonedRange.detach();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!offset || (offset != <span class=\"literal\">null</span> ? offset.height : <span class=\"keyword\">void</span> <span class=\"number\">0</span>) === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                clonedRange = range.cloneRange();</div><div class=\"line\">                shadowCaret = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"|\"</span>);</div><div class=\"line\">                clonedRange.insertNode(shadowCaret);</div><div class=\"line\">                clonedRange.selectNode(shadowCaret);</div><div class=\"line\">                rect = clonedRange.getBoundingClientRect();</div><div class=\"line\">                offset = &#123;</div><div class=\"line\">                    height: rect.height,</div><div class=\"line\">                    left: rect.left,</div><div class=\"line\">                    top: rect.top</div><div class=\"line\">                &#125;;</div><div class=\"line\">                shadowCaret.parentNode.removeChild(shadowCaret);</div><div class=\"line\">                clonedRange.detach();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> offset;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 获取光标所在的元素  适合contenteditable元素 , 不适合input</span></div><div class=\"line\">    getSelectionStart: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getSelection().anchorNode ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 设置光标跳转最后 适合contenteditable元素 , 不适合input</span></div><div class=\"line\">    moveToEnd : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.getSelection) &#123;  <span class=\"comment\">//ie11 10 9 ff safari</span></div><div class=\"line\">            obj.focus();            <span class=\"comment\">//解决ff不获取焦点无法定位问题</span></div><div class=\"line\">            <span class=\"keyword\">var</span> range = <span class=\"built_in\">window</span>.getSelection();  <span class=\"comment\">//创建range</span></div><div class=\"line\">            range.selectAllChildren(obj);       <span class=\"comment\">//range 选择obj下所有子内容</span></div><div class=\"line\">            range.collapseToEnd();              <span class=\"comment\">//光标移至最后</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.selection) &#123;          <span class=\"comment\">//ie10 9 8 7 6 5</span></div><div class=\"line\">            <span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.selection.createRange();   <span class=\"comment\">//创建选择对象</span></div><div class=\"line\">            <span class=\"comment\">//var range = document.body.createTextRange();</span></div><div class=\"line\">            range.moveToElementText(obj);                   <span class=\"comment\">//range定位到obj</span></div><div class=\"line\">            range.collapse(<span class=\"literal\">false</span>);                          <span class=\"comment\">//光标移至最后</span></div><div class=\"line\">            range.select();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    <span class=\"comment\">// 光标处插入内容 适合contenteditable元素 , 不适合input</span></div><div class=\"line\">    insertHtmlAtCurrent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> html , current_range </span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> sel, range;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.getSelection) &#123;</div><div class=\"line\">            sel = current_range ? current_range : <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sel.getRangeAt &amp;&amp; sel.rangeCount) &#123;</div><div class=\"line\">                range = sel.getRangeAt(<span class=\"number\">0</span>);</div><div class=\"line\">                range.deleteContents();</div><div class=\"line\">                <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">                el.innerHTML = html;</div><div class=\"line\">                <span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment(),</div><div class=\"line\">                    node, lastNode;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((node = el.firstChild)) &#123;</div><div class=\"line\">                    lastNode = frag.appendChild(node);</div><div class=\"line\">                &#125;</div><div class=\"line\">                range.insertNode(frag);</div><div class=\"line\">                <span class=\"keyword\">if</span> (lastNode) &#123;</div><div class=\"line\">                    range = range.cloneRange();</div><div class=\"line\">                    range.setStartAfter(lastNode);</div><div class=\"line\">                    range.collapse(<span class=\"literal\">true</span>);</div><div class=\"line\">                    sel.removeAllRanges();</div><div class=\"line\">                    sel.addRange(range);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.selection &amp;&amp; <span class=\"built_in\">document</span>.selection.type != <span class=\"string\">\"Control\"</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.selection.createRange().pasteHTML(html);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考网站：</p>\n<p>1、<a href=\"http://js8.in/2010/01/29/javascript%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/\" target=\"_blank\" rel=\"external\">三水清 javascript获取光标位置以及设置光标位置</a></p>\n<p>2、<a href=\"http://www.html-js.com/article/2621\" target=\"_blank\" rel=\"external\">Range及TextRange理解及区别</a> 这篇文章排版凌乱，如果需要操作TextRange之类的可以看看。</p>\n<p>3、<a href=\"https://imys.net/20161125/cursor-offset-at-input.html\" target=\"_blank\" rel=\"external\">JavaScript 获取输入时的光标位置及场景问题</a> 这篇强烈推荐，质量很高。</p>\n<p>4、<a href=\"http://www.zhangxinxu.com/wordpress/2011/04/js-range-html%E6%96%87%E6%A1%A3%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E9%80%89%E4%B8%AD%E3%80%81%E5%BA%93%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/\" target=\"_blank\" rel=\"external\">JS Range HTML文档/文字内容选中、库及应用介绍</a></p>\n<p>5、<a href=\"https://segmentfault.com/a/1190000005869372\" target=\"_blank\" rel=\"external\">html元素contenteditable属性如何定位光标和设置光标</a>一个例子。</p>\n<p>6、<a href=\"http://www.jb51.net/article/94012.htm\" target=\"_blank\" rel=\"external\">textarea js实现的光标位置工具函数</a>这个也好凌乱，不过以上看完应该能有解决方案了。如果对于操作textarea input需求大的可以看这篇。</p>\n</blockquote>\n"},{"title":"Range对象详解","url":"http://www.maotingfeng.me/2017/01/01/Range对象详解/","content":"<p>Range对象详解</p>\n<ol>\n<li>什么是<code>Range</code>对象？</li>\n</ol>\n<p>Range表示HTML文档的一部分内容，它可以在任何点开始和结束，最常见的Range就是用户选择的一段文本。通过Range对象，你可以找到开始点和结束点，你可以复制或者删除它，或者替换成另一段文本，甚至是一段HTML代码。</p>\n<p>获取<code>Range</code>对象有三种方法：</p>\n<ul>\n<li><p>document.createRange 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>Selection</code>对象的<code>getRangeAt</code>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;\t\t\t<span class=\"comment\">// 获取用户选中的内容Selection对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> range = selection.getRangeAt( <span class=\"number\">0</span> ) ;\t\t\t<span class=\"comment\">// 从Selection对象获取Range对象</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>Range</code>的构造函数来创建一个<code>Range</code>对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"keyword\">new</span> Range() ;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面介绍一下<code>Range</code>对象(实例)的属性：</p>\n<ol>\n<li><p><code>Range.collapsed</code> 只读，返回一个判断当前<code>Range</code>对象的起始位置和终止位置是否相同的布尔值。</p>\n<p>例1-1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;    <span class=\"comment\">// Selection对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> range = selection.getRangeAt( <span class=\"number\">0</span> ) ;    <span class=\"comment\">// W3C Range对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( range.collapsed ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-collapsed.png\" alt=\"range-collapsed\"></p>\n<p>当选中’年底’二字的时候，起始位置和终止位置不同，返回false；当光标在’年底’之后，起始位置和终止位置相同，collapsed返回true。</p>\n</li>\n<li><p><code>commonAncestorContainer</code>只读，返回包含<code>startContainer</code>和<code>endContainer</code>的最深的节点</p>\n<p>一般为文本节点，比如选中’年底’，返回的是包含’年底’的那个文本节点。</p>\n<p>注意⚠️：返回的文本节点，是包含年底二字的文本节点，’每到年底…’整段都是那个文本节点。如果<code>Range</code>对象跨标签，<code>&lt;p&gt;每到年底,很多新闻&lt;/p&gt;&lt;span&gt;比如洞察宇宙的&lt;/span&gt;</code>当选中<code>很多新闻&lt;/p&gt;&lt;span&gt;比如</code>这样子的文本，返回的最深节点为包含<code>p</code>标签和<code>span</code>标签的共同父标签。</p>\n</li>\n<li><p><code>startContainer</code>/<code>endContainer</code>只读，返回<code>Range</code>对象开始和终止的节点对象。</p>\n<p>一般选中文字，返回的都是文本节点</p>\n</li>\n<li><p><code>startOffset</code>/<code>endOffset</code>只读，表示Range起始位置和终止位置的数字</p>\n<p>例1-2:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;    <span class=\"comment\">// Selection对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> range = selection.getRangeAt( <span class=\"number\">0</span> ) ;    <span class=\"comment\">// W3C Range对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( range.startOffset , range.endOffset )</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-startoffset.jpeg\" alt=\"range-offsetStart\"></p>\n<p>​    当<code>Range.collapsed</code>为true是，startOffset和endOffset值相等。</p>\n</li>\n</ol>\n<p>下面介绍一下<code>Range</code>对象拥有的方法：</p>\n<p>1、<code>Range.setStart()</code>/<code>Range.setEnd()</code>设置<code>Range</code>的起点和终点，这两个方法都接受两个参数Node和offset；如果起始节点是Text,Comment, or CDATASection之一，那么offset指的是从起始节点算起的字符的偏移量，对于其他Node类型节点，offset是指从起始节点开始算起子节点的偏移量[^2]。</p>\n<p>例1-3:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;\t\t\t\t\t\t\t\t\t</div><div class=\"line\"><span class=\"keyword\">var</span> startNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>].firstChild ;\t<span class=\"comment\">// 获取文本节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> startOffset = <span class=\"number\">1</span> ;</div><div class=\"line\"></div><div class=\"line\">range.setStart(startNode, startOffset) ;</div><div class=\"line\">range.setEnd(startNode, startOffset + <span class=\"number\">4</span> ) ;</div><div class=\"line\"></div><div class=\"line\">selection.removeAllRanges() ;</div><div class=\"line\">selection.addRange( range ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-setStart.jpeg\" alt=\"range-setStart\"></p>\n<p>设置startOffset为1，从’每’第一个字符后开始，设置endOffset为，起始之后的4个字符，逗号之后。最后通过<code>Selection</code>对象的<code>removeAllRanges()</code>和<code>addRange()</code>方法，建立拖蓝<a href=\"蓝底黑字的部分，即鼠标拖动经过文字，产生的蓝色底色的部分\">^1</a>的文本选区。<code>Selection</code>对象的API可以看MDN的文档，见下面的参考资料超链接。</p>\n<p>2、<code>Range.setStartBefore()</code>/<code>Range.setStartAfter()</code>/<code>Range.setEndBefore()</code>/<code>Range.setEndAfter()</code>以其他节点之前，之后为基准，设置<code>Range</code>对象的起止点。这四个方法共同接受一个参数,referenceNode。</p>\n<p>比如，你想要选中<code>&lt;p&gt;每到年底，很多新闻机构都会评选年度新闻。小编注意到，习主席今年贺词提到的具体成就格外关注科技和创新。&lt;/p&gt;</code>整个<code>p</code>标签的文本，可以：</p>\n<p>例1-4</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>].firstChild ;</div><div class=\"line\"><span class=\"comment\">// 设置setStartBefore和setEndAfter为共同的一个文本节点即可选中这个标签的所有文本</span></div><div class=\"line\">range.setStartBefore( pTextNode ) ;</div><div class=\"line\">range.setEndAfter( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\">selection.removeAllRanges() ;</div><div class=\"line\">selection.addRange( range ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-setStartBefore.jpeg\" alt=\"range-setStartBefore\"></p>\n<p>3、<code>Range.selectNode()</code>设置<code>Range</code>对象包含指定的<code>Node</code>节点和它的内容，参数为需要选中的Node，referenceNode;执行之后，<code>Range</code>对象的startContainer和endContainer为传入的referenceNode的父元素。</p>\n<p>4、<code>Range.selectNodeContents()</code>设置<code>Range</code>对象包含指定<code>Node</code>节点的内容，例1-4的代码可改写成如下：</p>\n<p>例1-5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>] ;</div><div class=\"line\"><span class=\"comment\">// setStartBefore和setEndAfter去掉，换成selectNodeContents</span></div><div class=\"line\">range.selectNodeContents( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\">selection.removeAllRanges() ;</div><div class=\"line\">selection.addRange( range ) ;</div></pre></td></tr></table></figure>\n<p>细心的你可能发现第三行代码，最后的获取的节点不一样了，有<code>firstChild</code>的获取的是text节点，没有的，获取的是element节点。<code>setStartBefore</code>传入的参数若是一个element节点，则<code>Range</code>对象会包含这个element节点，因为选区的内容是从element节点之前开始的。倘如传入的是element节点下面的text节点，则<code>Range</code>对象不会包含这个element节点，单单只包含text节点的内容。</p>\n<p>调用了<code>range.selectNodeContents</code>方法之后：</p>\n<blockquote>\n<p>The parent <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\" rel=\"external\"><code>Node</code></a> of the start and end of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\" target=\"_blank\" rel=\"external\"><code>Range</code></a> will be the reference node. The <code>startOffset</code> is 0, and the <code>endOffset</code> is the number of child <code>Nodes</code> or number of characters contained in the reference node.</p>\n</blockquote>\n<p>翻译一下，意思大概：</p>\n<blockquote>\n<p><code>Range</code>对象的开始节点和结束节点的父节点为传入的reference node，起始偏移量为0，结束偏移量为子节点的个数[^2]或者reference node节点包含的文本字符数。</p>\n</blockquote>\n<p>我测试了一下，当执行上面的代码之后:<code>console.log( range.startContainer === pTextNode , range.endContainer === pTextNode )</code></p>\n<p>打印了一下，<code>true true</code>，结果两个都是为true。正确意思应该是startContainer和endContainer都应该是reference node，而不是它们的父节点是reference node。这个和<code>Range.selectNode</code>的方法实现有点不一样，<code>Range.selectNode</code>执行完之后，startContainer和endContainer代表的是reference node的父元素。</p>\n<p>4、<code>Range.collpase()</code>移动<code>Range</code>对象的开始或者结束节点，到另外一个边界点。即，折叠开始节点到结束节点，或者折叠结束节点到开始节点，让开始和结束节点重合。这个方法接受一个布尔值的参数，如果为true，则折叠结束节点到开始节点，false，折叠开始节点到结束节点。折叠之后的<code>Range</code>对象是空的，没有内容，在dom树中指定了一个单一的入口节点。判断一个<code>Range</code>对象是否已经被折叠过了，可以查看<code>Range.collapsed</code>属性。</p>\n<p>例1-6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>].firstChild ;</div><div class=\"line\">range.selectNode( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\">range.collapse( <span class=\"literal\">false</span> ) ;</div><div class=\"line\"></div><div class=\"line\">selection.removeAllRanges() ;</div><div class=\"line\">selection.addRange( range ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-collpased.jpeg\" alt=\"range-collpased\"></p>\n<p>光标选中了pTextNode的句号之后的最后一部分。</p>\n<p>以上为定位方法，下面介绍编辑方法：</p>\n<p>5、<code>Range.cloneContents()</code>返回DocumentFragment类型的<code>Range</code>中节点的文档片段。事件监听器不会被复制，html的属性中绑定的事件会被复制，id也会被复制，所以处理的时候要小心。</p>\n<p>例1-7:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>] ;</div><div class=\"line\">range.selectNode( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cloned = range.cloneContents() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild( cloned ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-cloneContents.jpeg\" alt=\"range-cloneContents\"></p>\n<p>被复制出来的节点内容是：<code>&lt;p&gt;每到年底，很多新闻机构都会评选年度新闻。小编注意到，习主席今年贺词提到的具体成就格外关注科技和创新。&lt;/p&gt;</code>包含标签。</p>\n<p>6、<code>Range.deleteContents()</code>从文档中移除<code>Range</code>选中的内容，无返回值。</p>\n<p>7、<code>Range.extractContents()</code> 把<code>Range</code>的内容从文档树中提取到文档片段中。返回的也是DocumentFragment类型。</p>\n<p>例1-8:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>] ;</div><div class=\"line\">range.selectNode( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> extracted = range.extractContents() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild( extracted ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/clone-extractContents.jpeg\" alt=\"range-extractContents\"></p>\n<p>注意⚠️：如果Range对象跨标签，extractContents方法会返回补齐后的标签，比如<code>&lt;p&gt;abc&lt;/p&gt;&lt;span&gt;efg&lt;/span&gt;</code>如果选中<code>c&lt;/p&gt;&lt;span&gt;e</code>的话，返回的的DocumentFragment中内容是：<code>&lt;p&gt;c&lt;/p&gt;&lt;span&gt;e&lt;/span&gt;</code>。</p>\n<p>8、<code>Range.insertNode()</code>在起点处插入节点。该方法接受一个参数，newNode，要插入的节点。</p>\n<p>例1-9:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;         <span class=\"comment\">// Selection对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>] ;</div><div class=\"line\"></div><div class=\"line\">range.selectNode( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'我是新的内容'</span> ,</div><div class=\"line\">    newNode = <span class=\"built_in\">document</span>.createTextNode( text ) ;</div><div class=\"line\">range.insertNode( newNode ) ;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">range.setStart( newNode , text.length ) ;</div><div class=\"line\">range.collapse( <span class=\"literal\">true</span> ) ;</div><div class=\"line\"></div><div class=\"line\">selection.removeAllRanges() ;</div><div class=\"line\">selection.addRange( range ) ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-insertNode.jpeg\" alt=\"range-insertNode\"></p>\n<p>newNode可以是documentFragment类型的节点。</p>\n<p>9、<code>Range.surroundContents</code>接收一个Node类型的参数newNode。把<code>Range</code>对象的内容移动到newNode中，并且，将newNode放入当前<code>Range</code>对象的开始位置。包裹之后，<code>Range</code>对象的边界在也会受newNode影响。</p>\n<p>例1-10:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection() ;         <span class=\"comment\">// Selection对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>] ;</div><div class=\"line\">range.selectNode( pTextNode ) ;</div><div class=\"line\"></div><div class=\"line\">range.surroundContents( <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>) ) ;\t<span class=\"comment\">// 用div包裹p标签</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/range-surroundContents.jpeg\" alt=\"range-surroundContents\"></p>\n<blockquote>\n<p>An exception will be thrown, however, if the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\" target=\"_blank\" rel=\"external\"><code>Range</code></a> splits a non-<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Text\" target=\"_blank\" rel=\"external\"><code>Text</code></a> node with only one of its boundary points. That is, unlike the alternative above, if there are partially selected nodes, they will not be cloned and instead the operation will fail.</p>\n<p>也有例外情况, 如果选定的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Range\" target=\"_blank\" rel=\"external\"><code>Range</code></a>区域包含仅有一个节点标签的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Text\" target=\"_blank\" rel=\"external\"><code>Text</code></a>. 那标签将不会自动成对生成，操作将失败.</p>\n</blockquote>\n<p>其他一些方法:</p>\n<p>10、<code>Range.compareBoundaryPoints()</code>接受两个参数，第一个参数是how，第二个参数是<code>Range</code>类型的sourceRange，指示当前<code>Range</code>的相应边界点是否分别在sourceRange的对应边界点之前，等于或者之后。返回一个数字类型的值，-1，0，1。具体参数配置，请移步<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Range/compareBoundaryPoints\" target=\"_blank\" rel=\"external\">MDN Range.compareBoundaryPoints()</a></p>\n<p>例1-11:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> range = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> range2 = <span class=\"built_in\">document</span>.createRange() ;</div><div class=\"line\"><span class=\"keyword\">var</span> pTextNode = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )[<span class=\"number\">0</span>] ;</div><div class=\"line\"><span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'span'</span> )[<span class=\"number\">0</span>] ;\t<span class=\"comment\">// span 标签毗邻p标签之后</span></div><div class=\"line\"></div><div class=\"line\">range.selectNode( pTextNode ) ;</div><div class=\"line\">range2.selectNode( span ) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> compare = range2.compareBoundaryPoints( Range.END_TO_END , range ) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log( compare )\t<span class=\"comment\">// 返回 1  说明range2的end确实在range的end之后。</span></div></pre></td></tr></table></figure>\n<p>11、<code>Range.clone()</code>返回拥有和原 <code>Range</code> 相同端点的克隆 <code>Range</code> 对象。</p>\n<blockquote>\n<p>The returned clone is copied by value, not reference, so a change in either <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\" target=\"_blank\" rel=\"external\"><code>Range</code></a> does not affect the other.</p>\n<p>返回的clone对象拷贝了值，不是返回原有range的引用，所以改变其中的一个range不会影响另外一个。</p>\n</blockquote>\n<p>12、<code>Range.detach()</code>从使用状态释放 <code>Range</code>，此方法用于改善性能。</p>\n<blockquote>\n<p>Subsequent attempts to use the detached range will result in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMException\" target=\"_blank\" rel=\"external\"><code>DOMException</code></a> being thrown with an error code of <code>INVALID_STATE_ERR</code>.</p>\n<p>随后尝试使用已经释放的range会抛出一个DOMException的异常，错误状态码：INVALID_STATE_ERR。</p>\n</blockquote>\n<p>13、<code>Range.toString()</code>把<code>Range</code>对象的内容作为字符串返回。<code>alert( Range对象 )</code>默认调用的就是toString方法,弹出选中的内容。</p>\n<p>还有一些实验性的方法，不推荐在生产环境中使用：</p>\n<p>14、<code>Range.getBoundingClientRect()</code>返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ClientRect\" target=\"_blank\" rel=\"external\"><code>ClientRect</code></a> 对象，该对象限定了选定的文档对象的内容，该方法返回了一个矩形，这个矩形包围了该文档对象中所有元素的边界矩形集合。</p>\n<blockquote>\n<p>This is method is useful for determining the viewport coordinates of the cursor or selection inside a text box. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\" target=\"_blank\" rel=\"external\"><code>Element.getBoundingClientRect()</code></a> for the details on the returned value.</p>\n</blockquote>\n<p>当想获取视图窗口的坐标系时，这个方法还是挺有用的。返回当前<code>Range</code>的top，right，bottom，left，width，height。</p>\n<p>15、<code>Range.getClientRects()</code>返回一系列包含ClientReact对象的list。每个ClientRect对象代表在当前<code>Range</code>对象里的元素的ClientRect。</p>\n<blockquote>\n<p>The <strong>Range.getClientRects()**</strong> **method returns a list of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ClientRect\" target=\"_blank\" rel=\"external\"><code>ClientRect</code></a> objects representing the area of the screen occupied by the <a href=\"https://developer.mozilla.org/en/DOM/range\" target=\"_blank\" rel=\"external\">range</a>. This is created by aggregating the results of calls to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\" target=\"_blank\" rel=\"external\"><code>Element.getClientRects()</code></a> for all the elements in the range.</p>\n</blockquote>\n<p>16、其他方法，比如：<code>Range.compareNode()</code>、<code>Range.comparePoint()</code>、<code>Range.createContextualFragment()</code>、<code>Range.intersectsNode()</code>、<code>Range.isPointInRange()</code>都是Gecko 内核的方法，可移步<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Range\" target=\"_blank\" rel=\"external\">MDN Web Api接口 Range</a></p>\n<p>[^2]: 当range的开始节点或者结束节点不是文本节点的时候，偏移量代表想要选中的子节点个数的数字，不能超过子节点的长度,MDN上解释如下：If the endNode is a Node of type Text, Comment, or CDATASection, then endOffset is the number of characters from the start of endNode. For other Node types, endOffsetis the number of child nodes between the start of the endNode.</p>\n<blockquote>\n<p>参考资料</p>\n<p>1、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Range\" target=\"_blank\" rel=\"external\">MDN Web Api接口 Range</a></p>\n<p>2、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Selection\" target=\"_blank\" rel=\"external\">MDN Web Api接口 Selection</a></p>\n<p>2、<a href=\"https://imys.net/20161125/cursor-offset-at-input.html\" target=\"_blank\" rel=\"external\">JavaScript 获取输入时的光标位置及场景问题</a></p>\n</blockquote>\n"},{"title":"mac下sublime3安装插件报ThereAreNoPackagesAvailableForInstallation错误的解决办法","url":"http://www.maotingfeng.me/2016/11/03/mac下sublime3安装插件报ThereAreNoPackagesAvailableForInstallation错误的解决办法/","content":"<p>解决方案内容</p>\n<p><a href=\"https://segmentfault.com/a/1190000004119292\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000004119292</a></p>\n"},{"title":"position为relative的table-cell和其postion为absolute的子元素定位的bug","url":"http://www.maotingfeng.me/2016/10/31/position为relative的table-cell和其postion为absolute的子元素定位的bug/","content":"<h2 id=\"position为relative的table-cell和其postion为absolute的子元素定位的bug\"><a href=\"#position为relative的table-cell和其postion为absolute的子元素定位的bug\" class=\"headerlink\" title=\"position为relative的table-cell和其postion为absolute的子元素定位的bug\"></a>position为relative的table-cell和其postion为absolute的子元素定位的bug</h2><p>考虑如下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">  <span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.td</span> &#123; <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#f00</span>; &#125;</div><div class=\"line\">  <span class=\"selector-class\">.absolute</span> &#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">left</span>: -<span class=\"number\">20px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"td\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute\"</span>&gt;</span>这是内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>本该好好的按下面的显示：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/table-cell-absolute-bug01.jpeg\" alt=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/table-cell-absolute-bug01.jpeg\"></p>\n<p>可是，在firefox30版本一下( chrome,ie8910，opera38.0正常，貌似就ff有这个痛 )，就是下面的样子了：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/table-cell-absolute-bug02.jpeg\" alt=\"\"></p>\n<p>为啥这样子呢？</p>\n<p>移步 <a href=\"https://www.w3.org/TR/CSS21/visuren.html#choose-position\" target=\"_blank\" rel=\"external\">w3c</a></p>\n<blockquote>\n<p><strong>relative</strong></p>\n<p>The box’s position is calculated according to the <a href=\"https://www.w3.org/TR/CSS21/visuren.html#normal-flow\" target=\"_blank\" rel=\"external\">normal flow</a> (this is called the position in normal flow). Then the box is offset <a href=\"https://www.w3.org/TR/CSS21/visuren.html#relative-positioning\" target=\"_blank\" rel=\"external\">relative</a> to its normal position. When a box B is relatively positioned, the position of the following box is calculated as though B were not offset. The effect of ‘position:relative’ on table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, <strong>table-cell</strong>, and table-caption elements is undefined.</p>\n</blockquote>\n<p>可以看出，table-cell属性的元素其relative属性无效。</p>\n<p>解决方案呢？</p>\n<ul>\n<li>可以在td里面或者table-cell元素的内部插入一个div，然后将其设置为postion relative，不要直接在cell类的元素中直接设置position relative。</li>\n<li>具体方法可参考这个博文里的内容：<a href=\"https://davidwalsh.name/table-cell-position-absolute\" target=\"_blank\" rel=\"external\">table-cell-position-absolute</a></li>\n</ul>\n<p>参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\" target=\"_blank\" rel=\"external\">火狐开发者社区</a>:</p>\n<blockquote>\n<p>[1] 从 Firefox 30 起，Gecko 允许 <tr>,<thead>,<tfoot>元素使用 <code>position: relative;</code> 样式以作为绝对定位元素的容器。因此在表格内的 <code>position:absolute</code>元素同样可相对于这些元素定位。在其它浏览器与旧版本 Firefox 中，对表格行或一组行设置 <code>position: relative</code>是无效的。Firefox 通过在 JS 控制台输出对添加相对定位的表格行或行组元素的如下警告信息，来帮助开发者转移到新的样式行为上，并检测可能存在的渲染问题：</tfoot></thead></tr></p>\n<p>Relative positioning of table rows and row groups is now supported. This site may need to be updated because it may depend on this feature having no effect.</p>\n</blockquote>\n<p>火狐是支持<code>tr</code>这类标签的relative，不过测试了下chrome貌似不支持。</p>\n<p>完。</p>\n"},{"title":"angular的ngRoute详解","url":"http://www.maotingfeng.me/2016/10/30/angular的ngRoute详解/","content":"<h1 id=\"angular的ngRoute详解\"><a href=\"#angular的ngRoute详解\" class=\"headerlink\" title=\"angular的ngRoute详解\"></a>angular的ngRoute详解</h1><p>​    AngularJS的路由其实是一种纯前端的解决方案。不同于后端的路由，后端的路由是匹配不同的路由，输出不同的内容，浏览器拿到当前路由的内容，直接渲染展示。AngularJS的路由，当请求了这个url，根据其路由匹配规则，来匹配当前的url，然后请求模版，然后把数据结合模版插入到ng-view中去。总结就是，局部刷新体现在url的变更上。url变更，就可以记录到历史中去了，方便用户浏览历史，回退操作。相对于单纯的ajax局部刷新，优点还是很明显的。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>文件目录结构：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/angular-route-files.jpeg\" alt=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/angular-route-files.jpeg\"></p>\n<p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>angular ngRoute测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/angular.js/1.5.8/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/angular.js/1.5.8/angular-route.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"routeApp\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"routeController\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Angular Route Demo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/home\"</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/post\"</span>&gt;</span>post<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/about\"</span>&gt;</span>about<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/post.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>home.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是home的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>about.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是about的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>post.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是post的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/post/19\"</span>&gt;</span>跳转到id为19号的文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>post-id.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是post-id中的内容，动态获取到的id参数为:&#123;&#123;post_id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>运行可看到如下界面：</p>\n<p><img src=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/angular-route-demo.jpeg\" alt=\"http://oco9w3mgp.bkt.clouddn.com/blog_images/angular-route-demo.jpeg\"></p>\n<p>可以看到<code>ng-view</code>标识的属性元素，被<code>home.html</code>的内容填充了。</p>\n<p>post.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module( <span class=\"string\">'Module.Post'</span> , [<span class=\"string\">'ngRoute'</span>] )</div><div class=\"line\">.config([<span class=\"string\">'$routeProvider'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider</span>)</span>&#123;</div><div class=\"line\">    $routeProvider.when(<span class=\"string\">'/post'</span>,&#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'post.html'</span> ,</div><div class=\"line\">        controller: <span class=\"string\">'PostController'</span></div><div class=\"line\">    &#125;).when(<span class=\"string\">'/post/:post_id'</span>,&#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'post-id.html'</span> ,</div><div class=\"line\">        controller: <span class=\"string\">'PostIdController'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;]).controller( <span class=\"string\">'PostController'</span> , [ <span class=\"string\">'$scope'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> $scope </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125; ] ).controller( <span class=\"string\">'PostIdController'</span> , [ <span class=\"string\">'$scope'</span> , <span class=\"string\">'$routeParams'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> $scope , $routeParams </span>)</span>&#123;</div><div class=\"line\">    $scope.post_id = <span class=\"string\">'$routeParams.post_id = '</span> + $routeParams.post_id + <span class=\"string\">'。'</span> ;</div><div class=\"line\">&#125; ] ) ;</div></pre></td></tr></table></figure>\n<p>index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module( <span class=\"string\">'routeApp'</span> , [<span class=\"string\">'ngRoute'</span>,<span class=\"string\">'Module.Post'</span>] )</div><div class=\"line\">.config([<span class=\"string\">'$routeProvider'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider</span>)</span>&#123;</div><div class=\"line\">    $routeProvider.when(<span class=\"string\">'/home'</span>,&#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'home.html'</span> ,</div><div class=\"line\">        controller: <span class=\"string\">'HomeController'</span></div><div class=\"line\">    &#125;).when(<span class=\"string\">'/about'</span>,&#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'about.html'</span> ,</div><div class=\"line\">        controller: <span class=\"string\">'AboutController'</span> ,</div><div class=\"line\">        resolve: &#123;</div><div class=\"line\">            longTime: [ <span class=\"string\">'$q'</span> , <span class=\"string\">'$timeout'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> $q , $timeout </span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> deferred = $q.defer() ;</div><div class=\"line\">                $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    deferred.resolve( <span class=\"string\">'耗时3秒的操作完成了'</span> );</div><div class=\"line\">                &#125; , <span class=\"number\">3000</span> ) ;</div><div class=\"line\">                <span class=\"keyword\">return</span> deferred.promise ;</div><div class=\"line\">            &#125; ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).otherwise(<span class=\"string\">'/home'</span>)</div><div class=\"line\">&#125;]).controller( <span class=\"string\">'routeController'</span> , [ <span class=\"string\">'$scope'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> $scope </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125; ] ).controller( <span class=\"string\">'HomeController'</span> , [ <span class=\"string\">'$scope'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> $scope </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125; ] ).controller( <span class=\"string\">'AboutController'</span> , [ <span class=\"string\">'$scope'</span> , <span class=\"string\">'longTime'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> $scope , longTime </span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// longTime == '耗时3秒的操作完成了'</span></div><div class=\"line\">&#125; ] ) ;</div></pre></td></tr></table></figure>\n<p>需要注意的几点：</p>\n<ul>\n<li>module需要导入ngRoute模块</li>\n<li>$routeProvider的when方法，接收两个参数，第一个参数是路由，第二个参数是路由配置参数。</li>\n<li>otherwise用于默认的路由参数，类似导致404的路由，都会被重定向到这个默认的路由里。</li>\n<li>推荐<code>post.js</code>中的写法，模块化路由，讲相关的路由封装到一个post.js中，然后其它模块导入这个模块。</li>\n</ul>\n<h3 id=\"routeParams\"><a href=\"#routeParams\" class=\"headerlink\" title=\"$routeParams\"></a>$routeParams</h3><p>在<code>post.js</code>中，我们使用<code>$routeProvider</code>配置的第二个路由是这样的<code>/post/:post_id</code>。路由中的<code>/:post_id</code>其实是一个参数，它将匹配类似<code>/post/001</code>这种url，其中<strong>001</strong>就是这个<code>:post_id</code>的值。我们在路由对应的控制器中，可以通过<code>$routeParams</code>参数来获取这个url参数。</p>\n<h3 id=\"路由配置中的resolve\"><a href=\"#路由配置中的resolve\" class=\"headerlink\" title=\"路由配置中的resolve\"></a>路由配置中的resolve</h3><p>在配置路由时，配置<code>resolve</code>选项。配置<code>resolve</code>选项意味着，在进入这个路由之前就必须等待<code>resolve</code>中的数据返回。</p>\n<p>一般用于进入某个路由比较耗时，比如新闻标题进入新闻详情，新闻详情页需要ajax请求后台，后台返回数据之前，这个路由其实不应该执行，而是应该等待后台响应数据。这里一个加一个loading gif之类的动画。当ajax完成之后，angular通过注册resolve返回的promise对象的then方法，得知数据已经拿到了，把模版填充到<code>ng-view</code>中，然后执行对应路由的控制器。整个过程完成</p>\n<p>需要注意的是：</p>\n<ul>\n<li>可以将resolve配置中的键，本例是<code>AboutController</code>中的<code>longTime</code>键，可以将它注入其控制器中，然后就可以拿到后台返回的值了，本例返回的是：<code>&#39;耗时3秒的操作完成了&#39;</code>。</li>\n</ul>\n"},{"title":"http协议","url":"http://www.maotingfeng.me/2016/09/12/http协议/","content":"<h3 id=\"什么是HTTP协议\"><a href=\"#什么是HTTP协议\" class=\"headerlink\" title=\"什么是HTTP协议\"></a>什么是HTTP协议</h3><hr>\n<p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器</p>\n<p>目前我们使用的是HTTP/1.1 版本</p>\n<h3 id=\"URL详解\"><a href=\"#URL详解\" class=\"headerlink\" title=\"URL详解\"></a>URL详解</h3><p>URL(Uniform Resource Locator) 地址用于描述一个网络上的资源,  基本格式如下:</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">schema://host[:port#]/path/.../[?query-string][#anchor]</div></pre></td></tr></table></figure>\n<p>​    scheme               指定底层使用的协议(例如：http, https, ftp)</p>\n<p>​    host                     HTTP服务器的IP地址或者域名</p>\n<p>​    port#                   HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明</p>\n<p>​    path                     访问资源的路径</p>\n<p>​    query-string       发送给http服务器的数据</p>\n<p>​    anchor                锚</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.mywebsite.com/sj/test/test.aspx?name=sviergn&amp;x=true#stuff</div><div class=\"line\"></div><div class=\"line\">Schema:                 http</div><div class=\"line\">host:                   www.mywebsite.com</div><div class=\"line\">path:                   /sj/test/test.aspx</div><div class=\"line\">Query String:           name=sviergn&amp;x=true</div><div class=\"line\">Anchor:                 stuff</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"HTTP协议是无状态的\"><a href=\"#HTTP协议是无状态的\" class=\"headerlink\" title=\"HTTP协议是无状态的\"></a>HTTP协议是无状态的</h3><p>http协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。 为了解决这个问题， Web程序引入了Cookie机制来维护状态.</p>\n<h3 id=\"打开一个网页需要浏览器发送很多次Request\"><a href=\"#打开一个网页需要浏览器发送很多次Request\" class=\"headerlink\" title=\"打开一个网页需要浏览器发送很多次Request\"></a>打开一个网页需要浏览器发送很多次Request</h3><ol>\n<li>当你在浏览器输入URL <a href=\"http://www.cnblogs.com\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com</a> 的时候，浏览器发送一个Request去获取 <a href=\"http://www.cnblogs.com\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com</a> 的html.  服务器把Response发送回给浏览器.</li>\n</ol>\n<ol>\n<li>浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如图片，CSS文件，JS文件。</li>\n</ol>\n<ol>\n<li>浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。</li>\n</ol>\n<ol>\n<li>等所有的文件都下载成功后。 网页就被显示出来了。</li>\n</ol>\n<h3 id=\"HTTP消息的结构\"><a href=\"#HTTP消息的结构\" class=\"headerlink\" title=\"HTTP消息的结构\"></a>HTTP消息的结构</h3><p>先看Request 消息的结构,   Request 消息分为3部分，第一部分叫Request line, 第二部分叫Request header, 第三部分是body. header和body之间有个空行， 结构如下图:</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/263119/2012020914293943.png\" alt=\"\"></p>\n<p>第一行中的Method表示请求方法,比如”POST”,”GET”,  Path-to-resoure表示请求的资源， Http/version-number 表示HTTP协议的版本号。当使用的是”GET” 方法的时候， body是为空的，比如我们打开博客园首页的request 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET http://www.cnblogs.com/ HTTP/1.1</div><div class=\"line\">Host: www.cnblogs.com</div></pre></td></tr></table></figure>\n<p>抽象的东西，难以理解，老感觉是虚的， 所谓眼见为实, 实际见到的东西，我们才能理解和记忆。 我们今天用Fiddler，实际的看看Request和Response.</p>\n<p>下面我们打开Fiddler 捕捉一个博客园登录的Request 然后分析下它的结构, 在Inspectors tab下以Raw的方式可以看到完整的Request的消息，如下图:</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/263119/2012022009421183.png\" alt=\"\"></p>\n<p>我们再看Response消息的结构, 和Request消息的结构基本一样。 同样也分为三部分,第一部分叫Response line, 第二部分叫Response header，第三部分是body. header和body之间也有个空行,  结构如下图:</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/263119/2012021309365350.png\" alt=\"\"></p>\n<p>HTTP/version-number表示HTTP协议的版本号，  status-code 和message 请看下节状态代码的详细解释.</p>\n<p>我们用Fiddler 捕捉一个博客园首页的Response然后分析下它的结构, 在Inspectors tab下以Raw的方式可以看到完整的Response的消息，如下图：</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/263119/2012022009373182.png\" alt=\"\"></p>\n<h3 id=\"Get和Post方法的区别\"><a href=\"#Get和Post方法的区别\" class=\"headerlink\" title=\"Get和Post方法的区别\"></a>Get和Post方法的区别</h3><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>\n<p>我们看看GET和POST的区别</p>\n<ol>\n<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</li>\n<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li>\n<li>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</li>\n<li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li>\n</ol>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><p>Response 消息中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</p>\n<p>状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response.</p>\n<p>HTTP/1.1中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p>\n<p>1XX  提示信息 - 表示请求已被成功接收，继续处理</p>\n<p>2XX  成功 - 表示请求已被成功接收，理解，接受</p>\n<p>3XX  重定向 - 要完成请求必须进行更进一步的处理</p>\n<p>4XX  客户端错误 -  请求有语法错误或请求无法实现</p>\n<p>5XX  服务器端错误 -   服务器未能实现合法的请求</p>\n<p>看看一些常见的状态码</p>\n<p>200 OK</p>\n<p>最常见的就是成功响应状态码200了， 这表明该请求被成功地完成，所请求的资源发送回客户端</p>\n<p>302 Found</p>\n<p>重定向，新的URL会在response 中的Location中返回，浏览器将会自动使用新的URL发出新的Request</p>\n<p>例如在IE中输入， <a href=\"http://www.google.com\" target=\"_blank\" rel=\"external\">http://www.google.com</a>. HTTP服务器会返回302， IE取到Response中Location header的新URL, 又重新发送了一个Request.</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/263119/2012021115280744.png\" alt=\"\"></p>\n<p>304 Not Modified</p>\n<p>代表上次的文档已经被缓存了， 还可以继续使用，</p>\n<p>400 Bad Request  客户端请求与语法错误，不能被服务器所理解</p>\n<p>403 Forbidden 服务器收到请求，但是拒绝提供服务</p>\n<p>404 Not Found</p>\n<p>请求资源不存在（输错了URL）</p>\n<p>500 Internal Server Error 服务器发生了不可预期的错误</p>\n<p>503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p>\n<h2 id=\"HTTP-Request-header\"><a href=\"#HTTP-Request-header\" class=\"headerlink\" title=\"HTTP Request header\"></a>HTTP Request header</h2><p><strong>If-Modified-Since</strong></p>\n<p>作用： 把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中.</p>\n<p>例如：If-Modified-Since: Thu, 09 Feb 2012 09:07:57 GMT</p>\n<p><strong>If-None-Match</strong></p>\n<p>作用: If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态和新的资源和Etag.  使用这样的机制将提高网站的性能</p>\n<p>例如: If-None-Match: “03f2b33c0bfcc1:0”</p>\n<p><strong>Pragma</strong></p>\n<p>作用： 防止页面被缓存， 在HTTP/1.1版本中，它和Cache-Control:no-cache作用一模一样</p>\n<p>Pargma只有一个用法， 例如： Pragma: no-cache</p>\n<p>注意: 在HTTP/1.0版本中，只实现了Pragema:no-cache, 没有实现Cache-Control</p>\n<p><strong>Cache-Control</strong></p>\n<p>作用: 这个是非常重要的规则。 这个用来指定Response-Request遵循的缓存机制。各个指令含义如下</p>\n<p>Cache-Control:Public   可以被任何缓存所缓存</p>\n<p>Cache-Control:Private     内容只缓存到私有缓存中</p>\n<p>Cache-Control:no-cache  所有内容都不会被缓存</p>\n<p><strong>Accept</strong></p>\n<p>作用： 浏览器端可以接受的媒体类型,</p>\n<p>例如：  Accept: text/html  代表浏览器可以接受服务器回发的类型为 text/html  也就是我们常说的html文档,</p>\n<p>如果服务器无法返回text/html类型的数据,服务器应该返回一个406错误(non acceptable)</p>\n<p>通配符 * 代表任意类型</p>\n<p>例如  Accept: <em>/</em>  代表浏览器可以处理所有类型,(一般浏览器发给服务器都是发这个)</p>\n<p><strong>Accept-Encoding</strong></p>\n<p>作用： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）;</p>\n<p>例如： Accept-Encoding: gzip, deflate</p>\n<p><strong>Accept-Language</strong></p>\n<p>作用： 浏览器申明自己接收的语言。 </p>\n<p>语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；</p>\n<p>例如： Accept-Language: en-us</p>\n<p><strong>User-Agent</strong></p>\n<p>作用：告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本.</p>\n<p>我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。</p>\n<p>例如： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; InfoPath.2; .NET4.0E)</p>\n<p><strong>Accept-Charset</strong></p>\n<p>作用：浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）；</p>\n<p><strong>Cookie</strong></p>\n<p>作用： 最重要的header, 将cookie的值发送给HTTP 服务器</p>\n<p><strong>Content-Length</strong></p>\n<p>作用：发送给HTTP服务器数据的长度。</p>\n<p>例如： Content-Length: 38</p>\n<p><strong>Referer</strong></p>\n<p>作用： 提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p>\n<p>例如: Referer:<a href=\"http://translate.google.cn/?hl=zh-cn&amp;tab=wT\" target=\"_blank\" rel=\"external\">http://translate.google.cn/?hl=zh-cn&amp;tab=wT</a></p>\n<p><strong>Connection</strong></p>\n<p>例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p>\n<p>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p>\n<p><strong>Host</strong></p>\n<p>作用: 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的</p>\n<p>例如: 我们在浏览器中输入：<a href=\"http://www.guet.edu.cn/index.html\" target=\"_blank\" rel=\"external\">http://www.guet.edu.cn/index.html</a></p>\n<p>浏览器发送的请求消息中，就会包含Host请求报头域，如下：</p>\n<p>Host：<a href=\"http://www.guet.edu.cn\" target=\"_blank\" rel=\"external\">http://www.guet.edu.cn</a></p>\n<p>此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号</p>\n<h2 id=\"HTTP-Response-header\"><a href=\"#HTTP-Response-header\" class=\"headerlink\" title=\"HTTP Response header\"></a>HTTP Response header</h2><p><strong>Date</strong></p>\n<p>作用:  生成消息的具体时间和日期</p>\n<p>例如：　Date: Sat, 11 Feb 2012 11:35:14 GMT </p>\n<p><strong>Expires</strong></p>\n<p>作用: 浏览器会在指定过期时间内使用本地缓存</p>\n<p><strong>P3P</strong></p>\n<p>作用: 用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题</p>\n<p><strong>Set-Cookie</strong></p>\n<p>作用： 非常重要的header, 用于把cookie 发送到客户端浏览器， 每一个写入cookie都会生成一个Set-Cookie.</p>\n<p>例如: Set-Cookie: sc=4c31523a; path=/; domain=.acookie.taobao.com</p>\n<p><strong>ETag</strong></p>\n<p>作用:  和If-None-Match 配合使用。 （实例请看上节中If-None-Match的实例）</p>\n<p>例如: ETag: “03f2b33c0bfcc1:0”</p>\n<p><strong>Last-Modified</strong></p>\n<p>作用： 用于指示资源的最后修改日期和时间。（实例请看上节的If-Modified-Since的实例）</p>\n<p>例如: Last-Modified: Wed, 21 Dec 2011 09:09:10 GMT</p>\n<p><strong>Content-Type</strong></p>\n<p>作用：WEB服务器告诉浏览器自己响应的对象的类型和字符集。</p>\n<p>例如:</p>\n<p>Content-Type: text/html; charset=utf-8</p>\n<p>Content-Type:text/html;charset=GB2312</p>\n<p>Content-Type: image/jpeg</p>\n<p><strong>Content-Length</strong></p>\n<p>指明实体正文的长度，以字节方式存储的十进制数字来表示。在数据下行的过程中，Content-Length的方式要预先在服务器中缓存所有数据，然后所有数据再一股脑儿地发给客户端。</p>\n<p>例如: Content-Length: 19847</p>\n<p><strong>Content-Encoding</strong></p>\n<p>WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。</p>\n<p>例如：Content-Encoding：gzip</p>\n<p><strong>Content-Language</strong></p>\n<p>作用： WEB服务器告诉浏览器自己响应的对象的语言者</p>\n<p>例如： Content-Language:data</p>\n<p><strong>Server</strong></p>\n<p>作用：指明HTTP服务器的软件信息</p>\n<p>例如:Server: Microsoft-IIS/7.5</p>\n<p><strong>X-AspNet-Version</strong></p>\n<p>作用：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本</p>\n<p>例如: X-AspNet-Version: 4.0.30319</p>\n<p><strong>X-Powered-By</strong></p>\n<p>作用：表示网站是用什么技术开发的</p>\n<p>例如： X-Powered-By: ASP.NET</p>\n<p><strong>Connection</strong></p>\n<p>例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p>\n<p>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p>\n<p><strong>Location</strong></p>\n<p>作用： 用于重定向一个新的位置, 包含新的URL地址</p>\n<p> 实例请看304状态实例</p>\n<h3 id=\"HTTP协议是无状态的和Connection-keep-alive的区别\"><a href=\"#HTTP协议是无状态的和Connection-keep-alive的区别\" class=\"headerlink\" title=\"HTTP协议是无状态的和Connection: keep-alive的区别\"></a>HTTP协议是无状态的和Connection: keep-alive的区别</h3><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系</p>\n<p>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）</p>\n<p>从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p>\n<p> Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间</p>\n<blockquote>\n<p>原博地址：<a href=\"http://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html</a></p>\n</blockquote>\n"},{"title":"js的垃圾回收机制","url":"http://www.maotingfeng.me/2016/09/11/js的垃圾回收机制/","content":"<h2 id=\"js的垃圾回收机制-Garbage-Collecation\"><a href=\"#js的垃圾回收机制-Garbage-Collecation\" class=\"headerlink\" title=\"js的垃圾回收机制(Garbage Collecation)\"></a>js的垃圾回收机制(Garbage Collecation)</h2><p>函数中的局部变量的生命周期：局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。在这种情况下，很容易判断变量是否还有存在的必要；但并非所有情况下都这么容易就能得出结论。垃圾回收器必须跟踪哪个变量有用，哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两个策略。</p>\n<ol>\n<li>标记清除</li>\n</ol>\n<p>js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（<strong>闭包</strong>）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p>\n<p>到2008年为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</p>\n<ol>\n<li>引用计数</li>\n</ol>\n<p>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</p>\n<p>Netscape Navigator3是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题：循环引用。循环引用指的是对象A中包含一个指向对象B的指针，而对象B中也包含一个指向对象A的引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = &#123;&#125;;</div><div class=\"line\">  a.pro = b;</div><div class=\"line\">  b.pro = a;</div><div class=\"line\">&#125;</div><div class=\"line\">fn();</div></pre></td></tr></table></figure>\n<p>以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成<strong>内存泄露</strong>。</p>\n<p>我们知道，IE中有一部分对象并不是原生js对象。例如，其<strong>DOM和BOM</strong>中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。因此，即使<strong>IE的js引擎采用标记清除策略</strong>来实现，但js访问的<strong>COM对象依然是基于引用计数策略</strong>的。换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"some_element\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">myObject.e = element;</div><div class=\"line\">element.o = myObject;</div></pre></td></tr></table></figure>\n<p>这个例子在一个DOM元素（element)与一个原生js对象（myObject)之间创建了循环引用。其中，变量myObject有一个名为element的属性指向element对象；而变量element也有一个属性名为o回指myObject。由于存在这个循环引用，即使例子中的DOM从页面中移除，它也永远不会被回收。</p>\n<p>为了避免类似这样的循环引用问题，最好是在不使用它们的时候手工断开原生js对象与DOM元素之间的连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObject.element = <span class=\"literal\">null</span>;</div><div class=\"line\">element.o = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<p>将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾回收器下次运行时，就会删除这些值并回收它们占用的内存。</p>\n<blockquote>\n<p>原博地址：<a href=\"http://www.cnblogs.com/dolphinX/p/3348468.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dolphinX/p/3348468.html</a></p>\n</blockquote>\n"},{"title":"gulp配置","url":"http://www.maotingfeng.me/2016/08/28/gulp配置/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> *</div><div class=\"line\"> * @authors supmain (mtingfeng@gmail.com)</div><div class=\"line\"> * @date    2016-08-28 11:54:05</div><div class=\"line\"> * @version $Id$</div><div class=\"line\"> */</div><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\"></div><div class=\"line\">// 引入组件</div><div class=\"line\">var jshint = require(&apos;gulp-jshint&apos;);</div><div class=\"line\">var sass = require(&apos;gulp-sass&apos;);</div><div class=\"line\">var concat = require(&apos;gulp-concat&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">var rename = require(&apos;gulp-rename&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 检查脚本</div><div class=\"line\">gulp.task(&apos;lint&apos;, function() &#123;</div><div class=\"line\">    gulp.src(&apos;./js/*.js&apos;)</div><div class=\"line\">        .pipe(jshint())</div><div class=\"line\">        .pipe(jshint.reporter(&apos;default&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 编译Sass</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    gulp.src(&apos;./scss/*.scss&apos;)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(&apos;./css&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 合并，压缩文件</div><div class=\"line\">gulp.task(&apos;scripts&apos;, function() &#123;</div><div class=\"line\">    gulp.src(&apos;./js/*.js&apos;)</div><div class=\"line\">        .pipe(concat(&apos;all.js&apos;))</div><div class=\"line\">        .pipe(gulp.dest(&apos;./dist&apos;))</div><div class=\"line\">        .pipe(rename(&apos;all.min.js&apos;))</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;./dist&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 默认任务</div><div class=\"line\">gulp.task(&apos;default&apos;, function()&#123;</div><div class=\"line\">    gulp.run(&apos;lint&apos;, &apos;sass&apos;, &apos;scripts&apos;);</div><div class=\"line\"></div><div class=\"line\">    // 监听文件变化</div><div class=\"line\">    gulp.watch(&apos;./js/*.js&apos;, function()&#123;</div><div class=\"line\">        gulp.run(&apos;lint&apos;, &apos;sass&apos;, &apos;scripts&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"grunt配置","url":"http://www.maotingfeng.me/2016/08/28/grunt配置/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function(grunt) &#123;</div><div class=\"line\"></div><div class=\"line\">    // Project configuration.</div><div class=\"line\">    grunt.initConfig(&#123;</div><div class=\"line\">        pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class=\"line\">        cssmin: &#123;</div><div class=\"line\">            minify: &#123;</div><div class=\"line\">                expand: true,</div><div class=\"line\">                cwd: &apos;static/css/&apos;,</div><div class=\"line\">                src: [&apos;*.css&apos;, &apos;!*.min.css&apos;],</div><div class=\"line\">                dest: &apos;static_src/css/&apos;,</div><div class=\"line\">                ext: &apos;.min.css&apos;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            combine: &#123;</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    &apos;css/out.min.css&apos;: [&apos;css/part1.min.css&apos;, &apos;css/part2.min.css&apos;]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);//压缩代码</div><div class=\"line\">    grunt.loadNpmTasks(&apos;grunt-contrib-jshint&apos;);//检查语法错误</div><div class=\"line\">    grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);//合并文件</div><div class=\"line\">    grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;);//自动执行</div><div class=\"line\">    grunt.loadNpmTasks(&apos;grunt-contrib-cssmin&apos;);//最小化css</div><div class=\"line\">    grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class=\"line\"></div><div class=\"line\">    grunt.registerTask(&apos;default&apos;, [&apos;jshint&apos;, &apos;concat&apos;, &apos;uglify&apos;]);</div><div class=\"line\">    grunt.registerTask(&apos;check&apos;, [&apos;jshint&apos;]);</div><div class=\"line\">    grunt.registerTask(&apos;default&apos;, [&apos;cssmin:minify&apos;,&apos;cssmin:combine&apos;]);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"webpack配置","url":"http://www.maotingfeng.me/2016/08/28/webpack配置/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by maotingfeng on 16/7/18.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">var webpack = require( &apos;webpack&apos; ) ,</div><div class=\"line\">    CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin ,</div><div class=\"line\">    path = require( &apos;path&apos; ) ,</div><div class=\"line\">    root = path.resolve( &apos;./public_src&apos; ) ,</div><div class=\"line\">    env = process.env.NODE_ENV ,</div><div class=\"line\">    plugins = null ,</div><div class=\"line\">    loaders = [] ,</div><div class=\"line\">    __public = &apos;public&apos; ,</div><div class=\"line\">    __public_src = &apos;public_src&apos;,</div><div class=\"line\">    __js = path.join( __dirname , __public  , &apos;js&apos; ) ,</div><div class=\"line\">    __js_src = path.join( __dirname , __public_src , &apos;js&apos; ) ,</div><div class=\"line\">    __css = path.join( __dirname , __public , &apos;css&apos; ) ;</div><div class=\"line\">// extract-text-webpack-plugin : 有时候可能希望项目的样式能不要被打包到脚本中，而是独立出来作为.css，然后在页面中以&lt;link&gt;标签引入。这时候我们需要  来帮忙：</div><div class=\"line\">//var htmlWebpackPlugin = require( &apos;html-webpack-plugin&apos; ) ;</div><div class=\"line\">var importES5Shim = &apos;imports?shim=&apos;+ path.resolve( __js , &apos;es5-shim/es5-shim.min&apos; ) + &apos;&amp;sham=&apos;+ path.resolve( __js , &apos;es5-shim/es5-sham&apos; ) ;</div><div class=\"line\"></div><div class=\"line\">var plugin_uglify = new webpack.optimize.UglifyJsPlugin( &#123;</div><div class=\"line\">                        mangle:&#123; except: [&apos;$&apos;,&apos;jQuery&apos;,&apos;exports&apos;,&apos;require&apos;,&apos;module&apos;] &#125; ,</div><div class=\"line\">                        compress: &#123;</div><div class=\"line\">                            warnings: false ,   // 警告信息不显示</div><div class=\"line\">                        &#125; ,</div><div class=\"line\">                        sourceMap: true</div><div class=\"line\">                    &#125; ) ;</div><div class=\"line\"></div><div class=\"line\">/* ,</div><div class=\"line\"> new webpack.ProvidePlugin(&#123;</div><div class=\"line\">     $: &quot;jquery&quot;,</div><div class=\"line\">     jQuery: &quot;jquery&quot;,</div><div class=\"line\">     &quot;window.jQuery&quot;: &quot;jquery&quot;</div><div class=\"line\"> &#125;)</div><div class=\"line\">*/</div><div class=\"line\">var loader_scss = env == &apos;production&apos; ? importES5Shim + &apos;!style!css!autoprefixer?browsers=last 20 version!sass&apos; : &apos;style!css?modules&amp;importLoaders=2&amp;sourceMap&amp;localIdentName=[local]___[hash:base64:5]!autoprefixer?browsers=last 20 version!sass?outputStyle=expanded&amp;sourceMap&apos; ;</div><div class=\"line\">// 加载器</div><div class=\"line\">loaders = [</div><div class=\"line\">            &#123;   test: /\\.scss$/ , loader: loader_scss &#125; ,</div><div class=\"line\">            &#123; test: /\\.css$/ , loader: importES5Shim + &apos;!style!css&apos; &#125; ,</div><div class=\"line\">            &#123; test: /\\.jade$/ , loader: &apos;jade&apos; &#125; ,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: /\\.(jpe?g|png|gif|svg)$/i ,</div><div class=\"line\">                publicPath: &apos;../images/&apos; ,</div><div class=\"line\">                loaders: [</div><div class=\"line\">                    &apos;file?hash=sha512&amp;digest=hex&amp;name=[hash].[ext]&apos;</div><div class=\"line\">                ]</div><div class=\"line\">            &#125;</div><div class=\"line\">        ] ;</div><div class=\"line\">// 插件</div><div class=\"line\">plugins = [</div><div class=\"line\">    // 提取公共部分</div><div class=\"line\">    // new CommonsChunkPlugin( &apos;hr_common.min.js&apos; , [ &apos;hr_index&apos; , &apos;hr_jobs&apos; , &apos;hr_resume_upload&apos; , &apos;hr_resume_edit&apos; , &apos;hr_my_resume&apos; , &apos;hr_my_account&apos; , &apos;hr_my_account_edit&apos; , &apos;hr_my_wallet&apos; , &apos;hr_resumes&apos; , &apos;hr_register_account&apos; , &apos;hr_register_info&apos; , &apos;hr_job_detail&apos; , &apos;hr_findpwd&apos; ] )</div><div class=\"line\">]</div><div class=\"line\">if( env == &apos;production&apos; )&#123;</div><div class=\"line\">    plugins.push( plugin_uglify ) ;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    entry: &#123;</div><div class=\"line\">        &apos;index&apos; : path.resolve( __js_src , &apos;index.js&apos; ) ,</div><div class=\"line\">        // 个人 hr</div><div class=\"line\">        &apos;hr_index&apos; : path.resolve( __js_src , &apos;hr_index.js&apos; ) ,</div><div class=\"line\">        &apos;hr_jobs&apos; : path.resolve( __js_src , &apos;hr_jobs.js&apos; ) ,</div><div class=\"line\">        &apos;hr_resume_upload&apos; : path.resolve( __js_src , &apos;hr_resume_upload.js&apos; ) ,</div><div class=\"line\">        &apos;hr_resume_edit&apos; : path.resolve( __js_src , &apos;hr_resume_edit.js&apos; ) ,</div><div class=\"line\">        &apos;hr_my_resume&apos; : path.resolve( __js_src , &apos;hr_my_resume.js&apos; ) ,</div><div class=\"line\">        &apos;hr_my_account&apos; : path.resolve( __js_src , &apos;hr_my_account.js&apos; ) ,</div><div class=\"line\">        &apos;hr_my_account_edit&apos; : path.resolve( __js_src , &apos;hr_my_account_edit.js&apos; ) ,</div><div class=\"line\">        &apos;hr_my_wallet&apos;: path.resolve( __js_src , &apos;hr_my_wallet.js&apos; ) ,</div><div class=\"line\">        &apos;hr_resumes&apos;: path.resolve( __js_src , &apos;hr_resumes.js&apos; ) ,</div><div class=\"line\">        &apos;hr_register_account&apos;: path.resolve( __js_src , &apos;hr_register_account.js&apos; ) ,</div><div class=\"line\">        &apos;hr_register_info&apos;: path.resolve( __js_src , &apos;hr_register_info.js&apos; ) ,</div><div class=\"line\">        &apos;hr_job_detail&apos;: path.resolve( __js_src , &apos;hr_job_detail.js&apos; ) ,</div><div class=\"line\">        &apos;hr_findpwd&apos;: path.resolve( __js_src , &apos;hr_findpwd.js&apos; ) ,</div><div class=\"line\">        // 企业 company</div><div class=\"line\">        &apos;company_work&apos;: path.resolve( __js_src , &apos;company_work.js&apos; ),</div><div class=\"line\">        &apos;company_wallet&apos;: path.resolve( __js_src , &apos;company_wallet.js&apos;),</div><div class=\"line\">        &apos;company_resumes&apos;: path.resolve( __js_src , &apos;company_resumes.js&apos;),</div><div class=\"line\">        &apos;company_report_form&apos;: path.resolve( __js_src , &apos;company_report_form.js&apos;),</div><div class=\"line\">        &apos;company_register_corporate&apos;: path.resolve( __js_src , &apos;company_register_corporate.js&apos;),</div><div class=\"line\">        &apos;company_register_account&apos;: path.resolve( __js_src , &apos;company_register_account.js&apos; ),</div><div class=\"line\">        &apos;company_publish_post&apos;: path.resolve( __js_src , &apos;company_publish_post.js&apos;),</div><div class=\"line\">        &apos;company_position&apos;: path.resolve( __js_src, &apos;company_position.js&apos;),</div><div class=\"line\">        &apos;company_job_details&apos;: path.resolve( __js_src , &apos;company_job_details.js&apos;),</div><div class=\"line\">        &apos;company_findpwd&apos;: path.resolve( __js_src , &apos;company_findpwd.js&apos;),</div><div class=\"line\">        &apos;company_candidate&apos;: path.resolve( __js_src , &apos;company_candidate.js&apos;),</div><div class=\"line\">        &apos;company_account_set&apos;: path.resolve( __js_src , &apos;company_account_set.js&apos;),</div><div class=\"line\">        &apos;company_account_edit&apos;: path.resolve( __js_src , &apos;company_account_edit.js&apos;),</div><div class=\"line\">        &apos;company_apply_promise_service&apos;: path.resolve( __js_src , &apos;company_apply_promise_service.js&apos;),</div><div class=\"line\">        &apos;steward&apos;: path.resolve( __js_src , &apos;steward.js&apos;),</div><div class=\"line\">        // 公共部分(hr、company)</div><div class=\"line\">        &apos;common_resume_detail&apos;: path.resolve( __js_src , &apos;common_resume_detail.js&apos; ) ,</div><div class=\"line\">        &apos;common_login&apos;: path.resolve( __js_src , &apos;common_login.js&apos; ) ,</div><div class=\"line\">        &apos;common_msg&apos;: path.resolve( __js_src , &apos;common_msg.js&apos; )</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: &apos;./public/js&apos; ,</div><div class=\"line\">        publicPath: &apos;/js/&apos; ,</div><div class=\"line\">        filename: &apos;[name].min.js&apos;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    module: &#123;</div><div class=\"line\">        noParse: [ /moment\\.min\\.js/ ] ,</div><div class=\"line\">        loaders: loaders</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    plugins: plugins ,</div><div class=\"line\">    resolve: &#123;</div><div class=\"line\">       root: [ root ] ,</div><div class=\"line\">       alias: &#123;</div><div class=\"line\">           switchable: path.resolve( __js_src , &apos;lib/switchable.min.js&apos; ) ,</div><div class=\"line\">           dialog:  path.resolve( __js_src , &apos;lib/dialog&apos; ) ,</div><div class=\"line\">           hrjia_dialog: path.resolve( __js_src , &apos;lib/hrjia_dialog/hrjia_dialog.js&apos; ) ,</div><div class=\"line\">           jquerytmpl: path.resolve( __js_src , &apos;lib/jquery.tmpl.js&apos; ) ,</div><div class=\"line\">           validation: path.resolve( __js_src , &apos;lib/jquery-validation-1.14.0/dist/jquery.validate&apos; ) ,</div><div class=\"line\">           validation_zh: path.resolve( __js_src , &apos;lib/jquery-validation-1.14.0/dist/localization/messages_zh&apos; ) ,</div><div class=\"line\">           kitpage:  path.resolve( __js_src , &apos;lib/kitpage.js&apos; ) ,</div><div class=\"line\">           momentjs:  path.resolve( __js_src , &apos;lib/moment/min/moment.min.js&apos; ) ,</div><div class=\"line\">           easyaddress: path.resolve( __js_src , &apos;lib/easyaddress/jquery.easyaddress.js&apos; ) ,</div><div class=\"line\">           cookie: path.resolve( __js_src , &apos;lib/cookie.js&apos; ) ,</div><div class=\"line\">           md5 : path.resolve( __js_src , &apos;lib/jquery.md5.js&apos; ) ,</div><div class=\"line\">           mdate: path.resolve( __js_src , &apos;lib/mdate.js&apos; ) ,</div><div class=\"line\">           cropper: path.resolve( __js_src , &apos;lib/cropper-v2.3.0/cropper.js&apos; ) ,</div><div class=\"line\">           ajaxFileUpload: path.resolve( __js_src , &apos;lib/ajax_file_upload.js&apos; ) ,</div><div class=\"line\">           boardPopup: path.resolve( __js_src , &apos;lib/boardPopup.js&apos; ) ,</div><div class=\"line\">           upload_resume:  path.resolve( __js_src , &apos;upload_resume.js&apos; ) ,</div><div class=\"line\">           webuploader:  path.resolve( __js_src , &apos;lib/webuploader-0.1.5/webuploader.min&apos; ) ,</div><div class=\"line\">           percircle: path.resolve( __js_src , &apos;lib/percircle/percircle&apos; ) ,</div><div class=\"line\">           perfectScrollbar:  path.resolve( __js_src , &apos;lib/perfect-scrollbar/js/perfect-scrollbar.jquery&apos; ) ,</div><div class=\"line\">           checkReg: path.resolve( __js_src , &apos;lib/checkReg&apos; ) ,</div><div class=\"line\">           ymdate: path.resolve( __js_src , &apos;lib/ymdate&apos; ) ,</div><div class=\"line\">           browserCheck: path.resolve( __js_src , &apos;browserCheck&apos; ) ,</div><div class=\"line\">           global: path.resolve( __js_src , &apos;global.js&apos; ) ,</div><div class=\"line\">           hr_global: path.resolve( __js_src , &apos;hr_global.js&apos; ) ,</div><div class=\"line\">           company_global: path.resolve( __js_src , &apos;company_global.js&apos; ) ,</div><div class=\"line\">           common_upload_img:  path.resolve( __js_src , &apos;common_upload_img.js&apos; ),</div><div class=\"line\">           echarts: path.resolve( __js_src , &apos;lib/echarts.min.js&apos;)</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    externals: &#123;</div><div class=\"line\">        &quot;$&quot;      : &quot;jQuery&quot; ,</div><div class=\"line\">        &quot;jQuery&quot; : &quot;jQuery&quot; ,</div><div class=\"line\">        &quot;jquery&quot; : &quot;jQuery&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"javascript对象详解","url":"http://www.maotingfeng.me/2016/08/27/javascript对象详解/","content":"<ul>\n<li><a href=\"#对象的定义\">对象的定义</a></li>\n<li><a href=\"#创建对象\">创建对象</a></li>\n<li><a href=\"#属性的查询和设置\">属性的查询和设置</a></li>\n<li><a href=\"#删除属性\">删除属性</a></li>\n<li><a href=\"#检测属性\">检测属性</a></li>\n<li><a href=\"#枚举属性\">枚举属性</a></li>\n<li><a href=\"#属性getter和setter\">属性getter和setter</a></li>\n<li><a href=\"#属性的特性\">属性的特性</a></li>\n<li><a href=\"#对象的三个属性\">对象的三个属性</a></li>\n<li><a href=\"#序列化对象\">序列化对象</a></li>\n<li><a href=\"#对象的方法\">对象的方法</a></li>\n</ul>\n<h3 id=\"对象的定义\"><a href=\"#对象的定义\" class=\"headerlink\" title=\"对象的定义\"></a>对象的定义</h3><p>对象是javascript的基本数据类型，对象是一种复合值：它将很多值（原始值或者其他对象）聚合在一起，可通过名字访问这些值。对象也可看做是属性的无序集合，每个属性都是一个名/值对。这种基本数据结构有很多种叫法，比如散列（hash）、散列表（hashtable）、字典（dictionary）、关联数组（associative array）。javascript对象的区别于其它语言中类似对象数据结构的本质特征是：javascript对象还可以从一个成为原型的对象继承属性，即“原型式继承”(prototypal inheritance)。</p>\n<p>对象拥有三个相关的对象特性（object attribute）</p>\n<ul>\n<li>对象的原型（prototype）：原型对象指向另外一个对象，本对象的属性继承自它的原型对象</li>\n<li>对象的类 （class）:是一个标志对象类型的字符串</li>\n<li>对象的扩展标记（extensible flag）：指明了是否可以向该对象添加新属性</li>\n</ul>\n<p>对象的属性包含名字和值，属性名是可以包含空字符串在那的任意字符串，但对象中不能存在两个同名的属性名。属性值可以是任意javascript值，或者是一个getter或setter函数（ECMAScript 5特性）</p>\n<p>对象的属性还有一些与之相关的值，称为“属性特性”（prototype attribute）</p>\n<ul>\n<li>可 写 性（wtitable attribute）：表明是否可以设置该属性的值</li>\n<li>可枚举性（enumerable attribute）：表明是否可以通过for/in循环反悔该属性</li>\n<li>可配置性（configurable attribute）：表明是否可以删除或者修改该属性</li>\n</ul>\n<p>javascript中对象有三大类：</p>\n<ol>\n<li>内置对象（native object）：是由ECMAScript规范定义的对象或类，例如，数组，函数，日期，正则表达式都是内置对象</li>\n<li>宿主对象（host object）：是由javascript解释器所嵌入的宿主环境（比如web浏览器）定义的。例如，表示网页结构的HTMLElement对象均是宿主对象。由于宿主环境定义的方法可以当成普通的javascript函数对象，宿主对象也可以当成内置对象。</li>\n<li>自定义对象（user-defined object）：是有运行中javascript代码创建的对象，例如<code>var a = {} ;</code></li>\n</ol>\n<p>对象的属性也可分为两类：</p>\n<ol>\n<li>自有属性（own prototype）：是直接在对象中定义的属性</li>\n<li>继承属性（inherited prototype）：是在对象的原型对象中定义的属性</li>\n</ol>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>在javascript中，有三种方式可以创建对象：</p>\n<ol>\n<li><p>对象直接量</p>\n<blockquote>\n<ul>\n<li>属性名可以是javascript标志符也可以是字符串直接量（包括空字符串）例如：<code>var a = { b: 2 , &#39;&#39; : 3 } ;</code></li>\n</ul>\n<ul>\n<li>保留字用作属性名，必需用引号(ECMAScript 5中可以不用引号)，例如：<code>var a = { &quot;for&quot; : 4 } ;</code></li>\n<li>对象直接量中的最后一个属性后的逗号分隔符将被忽略（ECMAScript 5特性）,而且大部分ECMAScipt 3的实现都支持忽略逗号，但是在老版本IE中会报错( 我印象中貌似ie8以及以下版本 )。例如：<code>var a = { b : 2 , } ;</code></li>\n</ul>\n</blockquote>\n</li>\n<li><p>使用关键字new</p>\n<blockquote>\n<ul>\n<li>new运算符创建并初始化一个新对象。关键字new后跟随一个函数调用。这里的函数被称为构造函数（constructor）。构造函数用以初始化一个新创建的对象。例如：<code>var a = new Object() ;// 创建一个空对象，和{}一样</code></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Object.create()（ECMAScript 5特性）</p>\n<blockquote>\n<ul>\n<li>一个静态函数，用以创建一个对象，其中第一个参数是这个对象的原型，第二个可选参数，用以对对象的属性进行进一步描述。<code>var o1 = Object.create( { x : 1 , y : 2 } ) ;// o1继承了属性x和y</code></li>\n<li>第一个参数若为null，则创建一个没有原型的新对象，不会继承任何东西，包括基础方法，比如toString()，所以它将不能和“＋”运算符一起正常工作。</li>\n<li>创建普通空对象，<code>var o3 = Object.create( Object.prototype ) ; // o3和{}和new Object() 一样</code></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>一些特性：</p>\n<ul>\n<li>所有通过对象直接量创建的对象都具有同一个原型对象，可用Object.prototype获得原型对象的引用</li>\n<li>通过关键字new创建的对象的原型就是构造函数的prototype属性的值,<code>var a = new Array() ;// a的原型对象就是Array.prototype</code></li>\n<li>没有原型对象的对象为数不多，Object.prototype就没有原型对象，它不继承任何属性。其它原型对象都是普通对象，普通对象都具有原型；（null，也是没有原型对象的对象，个人理解）</li>\n<li>所有内置构造函数（以及大部分自定义的构造函数）都具有一个继承自Object.prototype的原型（即，所有内置构造函数的原型对象都继承自Object.prototype ）。例如：new Date()创造的对象同时继承Date.prototype和Object.prototype，这一系列的原型对象就是所谓的“原型链”(prototype chain)</li>\n</ul>\n<p>例6-1:通过原型继承创建一个新对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\"> p </span>)</span>&#123;\t\t<span class=\"comment\">// 返回一个继承自原型对象p的属性的新对象</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>( p == <span class=\"literal\">null</span> ) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>() ;\t<span class=\"comment\">// p是一个对象，但不能为null和undefined</span></div><div class=\"line\">  \t<span class=\"keyword\">if</span>( <span class=\"built_in\">Object</span>.create ) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create( p ) ;\t<span class=\"comment\">// 如果cteate()方法存在，则使用它</span></div><div class=\"line\">  \t<span class=\"keyword\">var</span> t = <span class=\"keyword\">typeof</span> p ;\t<span class=\"comment\">// 否则进一步检测</span></div><div class=\"line\">  \t<span class=\"keyword\">if</span>( t !== <span class=\"string\">\"object\"</span> &amp;&amp; t !== <span class=\"string\">\"function\"</span> ) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>() ;\t<span class=\"comment\">// p只能是一个对象或者函数对象</span></div><div class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125; ;\t<span class=\"comment\">// 定义一个空的构造函数</span></div><div class=\"line\">  \tf.prototype = p ;\t<span class=\"comment\">// 将其原型属性设置为p</span></div><div class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f() ;\t<span class=\"comment\">// 使用f()创建一个p的继承对象</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>inherit函数不能完全替代Object.cteate() ， 它不能传入null为原型创建对象，而且不能接受可选的第二个参数</p>\n</blockquote>\n<p><strong><em>才写了两小节  未完待续</em></strong></p>\n"},{"title":"Hello World","url":"http://www.maotingfeng.me/2016/07/25/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"about","url":"http://www.maotingfeng.me/about/index.html","content":"<p>about:</p>\n<ul>\n<li>type: me<br>icon: icon-user<br>text_value:<ul>\n<li>“Scut，1991，Spring.”</li>\n<li>“喜欢设计，喜欢编程，喜欢浪.”</li>\n<li>“前端开发工程师，常用 HTML / CSS / JavaScript / nodejs / markdown.”</li>\n</ul>\n</li>\n<li>type: Github<br>icon: icon-github<br>text_key: Github<br>text_value: “@lcoder”<br>text_value_url: <a href=\"https://github.com/lcoder\" target=\"_blank\" rel=\"external\">https://github.com/lcoder</a></li>\n<li>type: weibo<br>icon: icon-weibo<br>text_key: 微博<br>text_value: “@小强吃大蒜”<br>text_value_url: <a href=\"http://weibo.com/mivae\" target=\"_blank\" rel=\"external\">http://weibo.com/mivae</a></li>\n<li>type: mail<br>icon: icon-mail<br>text_key: Gmail<br>text_value: “mtingfeng@gmail.com”</li>\n<li>type: location<br>icon: icon-location<br>text_value: 杭州</li>\n</ul>\n"},{"title":"自定义样式","url":"http://www.maotingfeng.me/css/personal-style.css","content":"@charset \"UTF-8\";\n/**\n *\n * @authors supmain (mtingfeng@gmail.com)\n * @date    2016-08-02 19:42:47\n * @version $Id$\n */\n.highlight table td.gutter { display: none; counter-reset: line_num ; }\n.highlight table td.gutter .line { color: #f7f7f7; }\n.highlight table td.gutter .line::before { color: #f00;counter-increment: line_num ;content: counter(line_num) ; }"},{"title":"category","url":"http://www.maotingfeng.me/category/index.html","content":""},{"title":"tag","url":"http://www.maotingfeng.me/tag/index.html","content":""},{"title":"project","url":"http://www.maotingfeng.me/project/index.html","content":"<p>project:</p>\n<ul>\n<li>type: personal<br>name: fexo<br>url: <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/fexo</a><br>intro: A minimalist design theme for hexo<h1 id=\"type-company\"><a href=\"#type-company\" class=\"headerlink\" title=\"- type: company\"></a>- type: company</h1><h1 id=\"name-Fexo\"><a href=\"#name-Fexo\" class=\"headerlink\" title=\"name: Fexo\"></a>name: Fexo</h1><h1 id=\"url-https-github-com-forsigner-fexo\"><a href=\"#url-https-github-com-forsigner-fexo\" class=\"headerlink\" title=\"url: https://github.com/forsigner/fexo\"></a>url: <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/fexo</a></h1><h1 id=\"intro-A-minimalist-design-theme-for-hexo\"><a href=\"#intro-A-minimalist-design-theme-for-hexo\" class=\"headerlink\" title=\"intro: A minimalist design theme for hexo\"></a>intro: A minimalist design theme for hexo</h1></li>\n<li>type: personal<br>name: beside<br>url: <a href=\"https://github.com/forsigner/beside\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/beside</a><br>intro: I need you beside me</li>\n<li>type: personal<br>name: web-fontmin<br>url: <a href=\"https://github.com/forsigner/web-fontmin\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/web-fontmin</a><br>intro: 字体子集化，在线提取你需要的字体</li>\n<li>type: personal<br>name: magic-check<br>url: <a href=\"https://github.com/forsigner/magic-check\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/magic-check</a><br>intro: Beautify Radio and Checkbox with pure CSS</li>\n<li>type: personal<br>name: nice-bar<br>url: <a href=\"https://github.com/forsigner/nice-bar\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/nice-bar</a><br>intro: A nice and lightweight scrollbar</li>\n<li>type: personal<br>name: angular-nice-bar<br>url: <a href=\"https://github.com/forsigner/angular-nice-bar\" target=\"_blank\" rel=\"external\">https://github.com/forsigner/angular-nice-bar</a><br>intro: A nice and lightweight scrollbar in Angular</li>\n</ul>\n"},{"title":"link","url":"http://www.maotingfeng.me/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 织网<br>info: 身体和灵魂，总有一个在路上<br>url: <a href=\"http://zheng-ji.info/\" target=\"_blank\" rel=\"external\">http://zheng-ji.info/</a><br>avatar: <a href=\"https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460\" target=\"_blank\" rel=\"external\">https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</a></li>\n<li>name: Dongyado<br>info: 生命不止，折腾不息<br>url: <a href=\"http://dongyado.com/\" target=\"_blank\" rel=\"external\">http://dongyado.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460\" target=\"_blank\" rel=\"external\">https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</a></li>\n<li>name: OrangeCoder<br>info: android ffmpeg nodejs gradle<br>url: <a href=\"http://orangecoder.com/\" target=\"_blank\" rel=\"external\">http://orangecoder.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460\" target=\"_blank\" rel=\"external\">https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</a></li>\n<li>name: EverET<br>info: 好记性不如烂笔头<br>url: <a href=\"http://everet.org/about-me/\" target=\"_blank\" rel=\"external\">http://everet.org/about-me/</a><br>avatar: <a href=\"https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460\" target=\"_blank\" rel=\"external\">https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</a></li>\n</ul>\n"},{"title":"search","url":"http://www.maotingfeng.me/search/index.html","content":"<input type=\"text\" class=\"st-default-search-input\">\n\n<div class=\"st-search-container\"></div>\n\n\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','Hz_rCic8xUP3ozNEgD5x','2.0.0');\n</script>"}]